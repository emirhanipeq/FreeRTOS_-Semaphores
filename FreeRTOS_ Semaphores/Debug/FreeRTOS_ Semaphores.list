
FreeRTOS_ Semaphores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005528  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005728  08005728  00006728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005750  08005750  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005750  08005750  00006750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005758  08005758  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005758  08005758  00006758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800575c  0800575c  0000675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005760  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e04  20000010  08005770  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003e14  08005770  00007e14  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc3a  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d4  00000000  00000000  00014c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00017150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000879  00000000  00000000  00017c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ad1  00000000  00000000  000184d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e808  00000000  00000000  0001afa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f80c9  00000000  00000000  000297aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121873  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c08  00000000  00000000  001218b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001244c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08005710 	.word	0x08005710

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08005710 	.word	0x08005710

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b988 	b.w	8000568 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	468e      	mov	lr, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d962      	bls.n	800034c <__udivmoddi4+0xdc>
 8000286:	fab2 f682 	clz	r6, r2
 800028a:	b14e      	cbz	r6, 80002a0 <__udivmoddi4+0x30>
 800028c:	f1c6 0320 	rsb	r3, r6, #32
 8000290:	fa01 f806 	lsl.w	r8, r1, r6
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	40b7      	lsls	r7, r6
 800029a:	ea43 0808 	orr.w	r8, r3, r8
 800029e:	40b4      	lsls	r4, r6
 80002a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a4:	fa1f fc87 	uxth.w	ip, r7
 80002a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80002b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002c4:	f080 80ea 	bcs.w	800049c <__udivmoddi4+0x22c>
 80002c8:	429a      	cmp	r2, r3
 80002ca:	f240 80e7 	bls.w	800049c <__udivmoddi4+0x22c>
 80002ce:	3902      	subs	r1, #2
 80002d0:	443b      	add	r3, r7
 80002d2:	1a9a      	subs	r2, r3, r2
 80002d4:	b2a3      	uxth	r3, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e6:	459c      	cmp	ip, r3
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	f080 80d6 	bcs.w	80004a0 <__udivmoddi4+0x230>
 80002f4:	459c      	cmp	ip, r3
 80002f6:	f240 80d3 	bls.w	80004a0 <__udivmoddi4+0x230>
 80002fa:	443b      	add	r3, r7
 80002fc:	3802      	subs	r0, #2
 80002fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000302:	eba3 030c 	sub.w	r3, r3, ip
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa2>
 800030a:	40f3      	lsrs	r3, r6
 800030c:	2200      	movs	r2, #0
 800030e:	e9c5 3200 	strd	r3, r2, [r5]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xb6>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb0>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d146      	bne.n	80003bc <__udivmoddi4+0x14c>
 800032e:	4573      	cmp	r3, lr
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xc8>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 8105 	bhi.w	8000542 <__udivmoddi4+0x2d2>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb6e 0203 	sbc.w	r2, lr, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4690      	mov	r8, r2
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e5      	beq.n	8000312 <__udivmoddi4+0xa2>
 8000346:	e9c5 4800 	strd	r4, r8, [r5]
 800034a:	e7e2      	b.n	8000312 <__udivmoddi4+0xa2>
 800034c:	2a00      	cmp	r2, #0
 800034e:	f000 8090 	beq.w	8000472 <__udivmoddi4+0x202>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	2e00      	cmp	r6, #0
 8000358:	f040 80a4 	bne.w	80004a4 <__udivmoddi4+0x234>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	0c03      	lsrs	r3, r0, #16
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	b280      	uxth	r0, r0
 8000366:	b2bc      	uxth	r4, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb2 fcfe 	udiv	ip, r2, lr
 800036e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000376:	fb04 f20c 	mul.w	r2, r4, ip
 800037a:	429a      	cmp	r2, r3
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x11e>
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x11c>
 8000386:	429a      	cmp	r2, r3
 8000388:	f200 80e0 	bhi.w	800054c <__udivmoddi4+0x2dc>
 800038c:	46c4      	mov	ip, r8
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	fbb3 f2fe 	udiv	r2, r3, lr
 8000394:	fb0e 3312 	mls	r3, lr, r2, r3
 8000398:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800039c:	fb02 f404 	mul.w	r4, r2, r4
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x144>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x142>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f200 80ca 	bhi.w	8000546 <__udivmoddi4+0x2d6>
 80003b2:	4602      	mov	r2, r0
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0x98>
 80003bc:	f1c1 0620 	rsb	r6, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f706 	lsr.w	r7, r2, r6
 80003c6:	431f      	orrs	r7, r3
 80003c8:	fa0e f401 	lsl.w	r4, lr, r1
 80003cc:	fa20 f306 	lsr.w	r3, r0, r6
 80003d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	fa1f fc87 	uxth.w	ip, r7
 80003e2:	fbbe f0f9 	udiv	r0, lr, r9
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000402:	f080 809c 	bcs.w	800053e <__udivmoddi4+0x2ce>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f240 8099 	bls.w	800053e <__udivmoddi4+0x2ce>
 800040c:	3802      	subs	r0, #2
 800040e:	443c      	add	r4, r7
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	fa1f fe83 	uxth.w	lr, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000424:	fb03 fc0c 	mul.w	ip, r3, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1ce>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000432:	f080 8082 	bcs.w	800053a <__udivmoddi4+0x2ca>
 8000436:	45a4      	cmp	ip, r4
 8000438:	d97f      	bls.n	800053a <__udivmoddi4+0x2ca>
 800043a:	3b02      	subs	r3, #2
 800043c:	443c      	add	r4, r7
 800043e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	fba0 ec02 	umull	lr, ip, r0, r2
 800044a:	4564      	cmp	r4, ip
 800044c:	4673      	mov	r3, lr
 800044e:	46e1      	mov	r9, ip
 8000450:	d362      	bcc.n	8000518 <__udivmoddi4+0x2a8>
 8000452:	d05f      	beq.n	8000514 <__udivmoddi4+0x2a4>
 8000454:	b15d      	cbz	r5, 800046e <__udivmoddi4+0x1fe>
 8000456:	ebb8 0203 	subs.w	r2, r8, r3
 800045a:	eb64 0409 	sbc.w	r4, r4, r9
 800045e:	fa04 f606 	lsl.w	r6, r4, r6
 8000462:	fa22 f301 	lsr.w	r3, r2, r1
 8000466:	431e      	orrs	r6, r3
 8000468:	40cc      	lsrs	r4, r1
 800046a:	e9c5 6400 	strd	r6, r4, [r5]
 800046e:	2100      	movs	r1, #0
 8000470:	e74f      	b.n	8000312 <__udivmoddi4+0xa2>
 8000472:	fbb1 fcf2 	udiv	ip, r1, r2
 8000476:	0c01      	lsrs	r1, r0, #16
 8000478:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800047c:	b280      	uxth	r0, r0
 800047e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000482:	463b      	mov	r3, r7
 8000484:	4638      	mov	r0, r7
 8000486:	463c      	mov	r4, r7
 8000488:	46b8      	mov	r8, r7
 800048a:	46be      	mov	lr, r7
 800048c:	2620      	movs	r6, #32
 800048e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000492:	eba2 0208 	sub.w	r2, r2, r8
 8000496:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800049a:	e766      	b.n	800036a <__udivmoddi4+0xfa>
 800049c:	4601      	mov	r1, r0
 800049e:	e718      	b.n	80002d2 <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e72c      	b.n	80002fe <__udivmoddi4+0x8e>
 80004a4:	f1c6 0220 	rsb	r2, r6, #32
 80004a8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ac:	40b7      	lsls	r7, r6
 80004ae:	40b1      	lsls	r1, r6
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b8:	430a      	orrs	r2, r1
 80004ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80004be:	b2bc      	uxth	r4, r7
 80004c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c4:	0c11      	lsrs	r1, r2, #16
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb08 f904 	mul.w	r9, r8, r4
 80004ce:	40b0      	lsls	r0, r6
 80004d0:	4589      	cmp	r9, r1
 80004d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d6:	b280      	uxth	r0, r0
 80004d8:	d93e      	bls.n	8000558 <__udivmoddi4+0x2e8>
 80004da:	1879      	adds	r1, r7, r1
 80004dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004e0:	d201      	bcs.n	80004e6 <__udivmoddi4+0x276>
 80004e2:	4589      	cmp	r9, r1
 80004e4:	d81f      	bhi.n	8000526 <__udivmoddi4+0x2b6>
 80004e6:	eba1 0109 	sub.w	r1, r1, r9
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f6:	b292      	uxth	r2, r2
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d229      	bcs.n	8000554 <__udivmoddi4+0x2e4>
 8000500:	18ba      	adds	r2, r7, r2
 8000502:	f109 31ff 	add.w	r1, r9, #4294967295
 8000506:	d2c4      	bcs.n	8000492 <__udivmoddi4+0x222>
 8000508:	4542      	cmp	r2, r8
 800050a:	d2c2      	bcs.n	8000492 <__udivmoddi4+0x222>
 800050c:	f1a9 0102 	sub.w	r1, r9, #2
 8000510:	443a      	add	r2, r7
 8000512:	e7be      	b.n	8000492 <__udivmoddi4+0x222>
 8000514:	45f0      	cmp	r8, lr
 8000516:	d29d      	bcs.n	8000454 <__udivmoddi4+0x1e4>
 8000518:	ebbe 0302 	subs.w	r3, lr, r2
 800051c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000520:	3801      	subs	r0, #1
 8000522:	46e1      	mov	r9, ip
 8000524:	e796      	b.n	8000454 <__udivmoddi4+0x1e4>
 8000526:	eba7 0909 	sub.w	r9, r7, r9
 800052a:	4449      	add	r1, r9
 800052c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000530:	fbb1 f9fe 	udiv	r9, r1, lr
 8000534:	fb09 f804 	mul.w	r8, r9, r4
 8000538:	e7db      	b.n	80004f2 <__udivmoddi4+0x282>
 800053a:	4673      	mov	r3, lr
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1ce>
 800053e:	4650      	mov	r0, sl
 8000540:	e766      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000542:	4608      	mov	r0, r1
 8000544:	e6fd      	b.n	8000342 <__udivmoddi4+0xd2>
 8000546:	443b      	add	r3, r7
 8000548:	3a02      	subs	r2, #2
 800054a:	e733      	b.n	80003b4 <__udivmoddi4+0x144>
 800054c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000550:	443b      	add	r3, r7
 8000552:	e71c      	b.n	800038e <__udivmoddi4+0x11e>
 8000554:	4649      	mov	r1, r9
 8000556:	e79c      	b.n	8000492 <__udivmoddi4+0x222>
 8000558:	eba1 0109 	sub.w	r1, r1, r9
 800055c:	46c4      	mov	ip, r8
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	e7c4      	b.n	80004f2 <__udivmoddi4+0x282>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_UART_RxCpltCallback>:
uint8_t pos= 0;

SemaphoreHandle_t xSemaphore;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	BaseType_t xOState;

	if (huart->Instance == USART3){
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1c      	ldr	r2, [pc, #112]	@ (80005ec <HAL_UART_RxCpltCallback+0x80>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d131      	bne.n	80005e2 <HAL_UART_RxCpltCallback+0x76>
		HAL_UART_Receive_IT(&huart3,&rData,1);
 800057e:	2201      	movs	r2, #1
 8000580:	491b      	ldr	r1, [pc, #108]	@ (80005f0 <HAL_UART_RxCpltCallback+0x84>)
 8000582:	481c      	ldr	r0, [pc, #112]	@ (80005f4 <HAL_UART_RxCpltCallback+0x88>)
 8000584:	f001 ff46 	bl	8002414 <HAL_UART_Receive_IT>
		BaseType_t xHigherPriorityTaskWoken =pdFALSE;
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]

		rxBuffer[pos++] = rData;
 800058c:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <HAL_UART_RxCpltCallback+0x8c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	1c5a      	adds	r2, r3, #1
 8000592:	b2d1      	uxtb	r1, r2
 8000594:	4a18      	ldr	r2, [pc, #96]	@ (80005f8 <HAL_UART_RxCpltCallback+0x8c>)
 8000596:	7011      	strb	r1, [r2, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b15      	ldr	r3, [pc, #84]	@ (80005f0 <HAL_UART_RxCpltCallback+0x84>)
 800059c:	7819      	ldrb	r1, [r3, #0]
 800059e:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <HAL_UART_RxCpltCallback+0x90>)
 80005a0:	5499      	strb	r1, [r3, r2]

		if(rData=='\n'){
 80005a2:	4b13      	ldr	r3, [pc, #76]	@ (80005f0 <HAL_UART_RxCpltCallback+0x84>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b0a      	cmp	r3, #10
 80005a8:	d11b      	bne.n	80005e2 <HAL_UART_RxCpltCallback+0x76>
			pos=0;
 80005aa:	4b13      	ldr	r3, [pc, #76]	@ (80005f8 <HAL_UART_RxCpltCallback+0x8c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
			xHigherPriorityTaskWoken=pdTRUE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
			xOState=xSemaphoreGiveFromISR(xSemaphore,&xHigherPriorityTaskWoken);
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <HAL_UART_RxCpltCallback+0x94>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f107 0208 	add.w	r2, r7, #8
 80005bc:	4611      	mov	r1, r2
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fb40 	bl	8003c44 <xQueueGiveFromISR>
 80005c4:	60f8      	str	r0, [r7, #12]

			if(xOState != pdFAIL){
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d00a      	beq.n	80005e2 <HAL_UART_RxCpltCallback+0x76>
				portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d007      	beq.n	80005e2 <HAL_UART_RxCpltCallback+0x76>
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <HAL_UART_RxCpltCallback+0x98>)
 80005d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	f3bf 8f4f 	dsb	sy
 80005de:	f3bf 8f6f 	isb	sy
			}
		}

	}
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40004800 	.word	0x40004800
 80005f0:	200000bc 	.word	0x200000bc
 80005f4:	2000002c 	.word	0x2000002c
 80005f8:	200000bd 	.word	0x200000bd
 80005fc:	200000b4 	.word	0x200000b4
 8000600:	200000c0 	.word	0x200000c0
 8000604:	e000ed04 	.word	0xe000ed04

08000608 <vGetSemaphore>:
void vGetSemaphore(void*pvParameters)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	while(1)
	{
      xSemaphoreTake(xSemaphore,portMAX_DELAY);
 8000610:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <vGetSemaphore+0x40>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f04f 31ff 	mov.w	r1, #4294967295
 8000618:	4618      	mov	r0, r3
 800061a:	f003 fbab 	bl	8003d74 <xQueueSemaphoreTake>

      if (strstr(rxBuffer, "OK") != NULL)
 800061e:	490b      	ldr	r1, [pc, #44]	@ (800064c <vGetSemaphore+0x44>)
 8000620:	480b      	ldr	r0, [pc, #44]	@ (8000650 <vGetSemaphore+0x48>)
 8000622:	f005 f83b 	bl	800569c <strstr>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d006      	beq.n	800063a <vGetSemaphore+0x32>
      {
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800062c:	2201      	movs	r2, #1
 800062e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000632:	4808      	ldr	r0, [pc, #32]	@ (8000654 <vGetSemaphore+0x4c>)
 8000634:	f000 fdca 	bl	80011cc <HAL_GPIO_WritePin>
 8000638:	e7ea      	b.n	8000610 <vGetSemaphore+0x8>
      }
      else
      {
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000640:	4804      	ldr	r0, [pc, #16]	@ (8000654 <vGetSemaphore+0x4c>)
 8000642:	f000 fdc3 	bl	80011cc <HAL_GPIO_WritePin>
      xSemaphoreTake(xSemaphore,portMAX_DELAY);
 8000646:	e7e3      	b.n	8000610 <vGetSemaphore+0x8>
 8000648:	200000c0 	.word	0x200000c0
 800064c:	08005728 	.word	0x08005728
 8000650:	200000b4 	.word	0x200000b4
 8000654:	40020400 	.word	0x40020400

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f000 fa08 	bl	8000a72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000662:	f000 f82b 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f000 f8b5 	bl	80007d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800066a:	f000 f883 	bl	8000774 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
    HAL_UART_Receive_IT(&huart3, &rData, 1);
 800066e:	2201      	movs	r2, #1
 8000670:	490d      	ldr	r1, [pc, #52]	@ (80006a8 <main+0x50>)
 8000672:	480e      	ldr	r0, [pc, #56]	@ (80006ac <main+0x54>)
 8000674:	f001 fece 	bl	8002414 <HAL_UART_Receive_IT>



   xSemaphore = xSemaphoreCreateBinary();
 8000678:	2203      	movs	r2, #3
 800067a:	2100      	movs	r1, #0
 800067c:	2001      	movs	r0, #1
 800067e:	f003 fa83 	bl	8003b88 <xQueueGenericCreate>
 8000682:	4603      	mov	r3, r0
 8000684:	4a0a      	ldr	r2, [pc, #40]	@ (80006b0 <main+0x58>)
 8000686:	6013      	str	r3, [r2, #0]

   xTaskCreate(vGetSemaphore,"get",1000,NULL,0,NULL);
 8000688:	2300      	movs	r3, #0
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	2300      	movs	r3, #0
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2300      	movs	r3, #0
 8000692:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000696:	4907      	ldr	r1, [pc, #28]	@ (80006b4 <main+0x5c>)
 8000698:	4807      	ldr	r0, [pc, #28]	@ (80006b8 <main+0x60>)
 800069a:	f003 fd03 	bl	80040a4 <xTaskCreate>

   vTaskStartScheduler();
 800069e:	f003 fe37 	bl	8004310 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a2:	bf00      	nop
 80006a4:	e7fd      	b.n	80006a2 <main+0x4a>
 80006a6:	bf00      	nop
 80006a8:	200000bc 	.word	0x200000bc
 80006ac:	2000002c 	.word	0x2000002c
 80006b0:	200000c0 	.word	0x200000c0
 80006b4:	0800572c 	.word	0x0800572c
 80006b8:	08000609 	.word	0x08000609

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	@ 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2234      	movs	r2, #52	@ 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 ffde 	bl	800568c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <SystemClock_Config+0xb0>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <SystemClock_Config+0xb0>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <SystemClock_Config+0xb0>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000770 <SystemClock_Config+0xb4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000700:	4a1b      	ldr	r2, [pc, #108]	@ (8000770 <SystemClock_Config+0xb4>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <SystemClock_Config+0xb4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000720:	2300      	movs	r3, #0
 8000722:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fd69 	bl	8001200 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000734:	f000 f89a 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f802 	bl	800175c <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800075e:	f000 f885 	bl	800086c <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_USART3_UART_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	@ (80007d0 <MX_USART3_UART_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800077e:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <MX_USART3_UART_Init+0x58>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_USART3_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_USART3_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_USART3_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_USART3_UART_Init+0x58>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <MX_USART3_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_USART3_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <MX_USART3_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_USART3_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_USART3_UART_Init+0x58>)
 80007b8:	f001 fdde 	bl	8002378 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f853 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000002c 	.word	0x2000002c
 80007d0:	40004800 	.word	0x40004800

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000864 <MX_GPIO_Init+0x90>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000864 <MX_GPIO_Init+0x90>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <MX_GPIO_Init+0x90>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <MX_GPIO_Init+0x90>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a17      	ldr	r2, [pc, #92]	@ (8000864 <MX_GPIO_Init+0x90>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <MX_GPIO_Init+0x90>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <MX_GPIO_Init+0x90>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a11      	ldr	r2, [pc, #68]	@ (8000864 <MX_GPIO_Init+0x90>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_GPIO_Init+0x90>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000838:	480b      	ldr	r0, [pc, #44]	@ (8000868 <MX_GPIO_Init+0x94>)
 800083a:	f000 fcc7 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 800083e:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	4619      	mov	r1, r3
 8000856:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_GPIO_Init+0x94>)
 8000858:	f000 fb0c 	bl	8000e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <Error_Handler+0x8>

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	4a10      	ldr	r2, [pc, #64]	@ (80008c4 <HAL_MspInit+0x4c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	@ 0x40
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <HAL_MspInit+0x4c>)
 800089c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	210f      	movs	r1, #15
 80008b2:	f06f 0001 	mvn.w	r0, #1
 80008b6:	f000 fa14 	bl	8000ce2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b0ae      	sub	sp, #184	@ 0xb8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2290      	movs	r2, #144	@ 0x90
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f004 fecf 	bl	800568c <memset>
  if(huart->Instance==USART3)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a26      	ldr	r2, [pc, #152]	@ (800098c <HAL_UART_MspInit+0xc4>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d144      	bne.n	8000982 <HAL_UART_MspInit+0xba>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80008f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008fe:	2300      	movs	r3, #0
 8000900:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4618      	mov	r0, r3
 8000908:	f001 f90e 	bl	8001b28 <HAL_RCCEx_PeriphCLKConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000912:	f7ff ffab 	bl	800086c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000916:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <HAL_UART_MspInit+0xc8>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	4a1d      	ldr	r2, [pc, #116]	@ (8000990 <HAL_UART_MspInit+0xc8>)
 800091c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000920:	6413      	str	r3, [r2, #64]	@ 0x40
 8000922:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <HAL_UART_MspInit+0xc8>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <HAL_UART_MspInit+0xc8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a17      	ldr	r2, [pc, #92]	@ (8000990 <HAL_UART_MspInit+0xc8>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <HAL_UART_MspInit+0xc8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000946:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800094a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000960:	2307      	movs	r3, #7
 8000962:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000966:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800096a:	4619      	mov	r1, r3
 800096c:	4809      	ldr	r0, [pc, #36]	@ (8000994 <HAL_UART_MspInit+0xcc>)
 800096e:	f000 fa81 	bl	8000e74 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2105      	movs	r1, #5
 8000976:	2027      	movs	r0, #39	@ 0x27
 8000978:	f000 f9b3 	bl	8000ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800097c:	2027      	movs	r0, #39	@ 0x27
 800097e:	f000 f9cc 	bl	8000d1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000982:	bf00      	nop
 8000984:	37b8      	adds	r7, #184	@ 0xb8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40004800 	.word	0x40004800
 8000990:	40023800 	.word	0x40023800
 8000994:	40020c00 	.word	0x40020c00

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <NMI_Handler+0x4>

080009a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <MemManage_Handler+0x4>

080009b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <UsageFault_Handler+0x4>

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d2:	f000 f88b 	bl	8000aec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009d6:	f004 f87d 	bl	8004ad4 <xTaskGetSchedulerState>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d001      	beq.n	80009e4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009e0:	f004 fbd2 	bl	8005188 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009ec:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <USART3_IRQHandler+0x10>)
 80009ee:	f001 fd55 	bl	800249c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000002c 	.word	0x2000002c

080009fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	@ (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a24:	f7ff ffea 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	@ (8000a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	@ (8000a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f004 fe3b 	bl	80056c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a52:	f7ff fe01 	bl	8000658 <main>
  bx  lr    
 8000a56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a58:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a64:	08005760 	.word	0x08005760
  ldr r2, =_sbss
 8000a68:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a6c:	20003e14 	.word	0x20003e14

08000a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC_IRQHandler>

08000a72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a76:	2003      	movs	r0, #3
 8000a78:	f000 f928 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7c:	200f      	movs	r0, #15
 8000a7e:	f000 f805 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a82:	f7ff fef9 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <HAL_InitTick+0x54>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <HAL_InitTick+0x58>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f943 	bl	8000d36 <HAL_SYSTICK_Config>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00e      	b.n	8000ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d80a      	bhi.n	8000ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f000 f90b 	bl	8000ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000acc:	4a06      	ldr	r2, [pc, #24]	@ (8000ae8 <HAL_InitTick+0x5c>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e000      	b.n	8000ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000004 	.word	0x20000004

08000aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_IncTick+0x20>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <HAL_IncTick+0x24>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <HAL_IncTick+0x24>)
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	200000c4 	.word	0x200000c4

08000b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b03      	ldr	r3, [pc, #12]	@ (8000b28 <HAL_GetTick+0x14>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	200000c4 	.word	0x200000c4

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <__NVIC_SetPriorityGrouping+0x40>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	4313      	orrs	r3, r2
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <__NVIC_SetPriorityGrouping+0x40>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00
 8000b70:	05fa0000 	.word	0x05fa0000

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4907      	ldr	r1, [pc, #28]	@ (8000bc8 <__NVIC_EnableIRQ+0x38>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	@ (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	@ (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	@ 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	@ 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff8e 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff29 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff3e 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff8e 	bl	8000c20 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5d 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff31 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffa2 	bl	8000c88 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff feda 	bl	8000b14 <HAL_GetTick>
 8000d60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d008      	beq.n	8000d80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2280      	movs	r2, #128	@ 0x80
 8000d72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e052      	b.n	8000e26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0216 	bic.w	r2, r2, #22
 8000d8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	695a      	ldr	r2, [r3, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d103      	bne.n	8000db0 <HAL_DMA_Abort+0x62>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d007      	beq.n	8000dc0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0208 	bic.w	r2, r2, #8
 8000dbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 0201 	bic.w	r2, r2, #1
 8000dce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dd0:	e013      	b.n	8000dfa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dd2:	f7ff fe9f 	bl	8000b14 <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	2b05      	cmp	r3, #5
 8000dde:	d90c      	bls.n	8000dfa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2220      	movs	r2, #32
 8000de4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2203      	movs	r2, #3
 8000dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e015      	b.n	8000e26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1e4      	bne.n	8000dd2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e0c:	223f      	movs	r2, #63	@ 0x3f
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d004      	beq.n	8000e4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2280      	movs	r2, #128	@ 0x80
 8000e46:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e00c      	b.n	8000e66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2205      	movs	r2, #5
 8000e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 0201 	bic.w	r2, r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	@ 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	e175      	b.n	8001180 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e94:	2201      	movs	r2, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f040 8164 	bne.w	800117a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d005      	beq.n	8000eca <HAL_GPIO_Init+0x56>
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d130      	bne.n	8000f2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	091b      	lsrs	r3, r3, #4
 8000f16:	f003 0201 	and.w	r2, r3, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d017      	beq.n	8000f68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d123      	bne.n	8000fbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	08da      	lsrs	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3208      	adds	r2, #8
 8000fb6:	69b9      	ldr	r1, [r7, #24]
 8000fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0203 	and.w	r2, r3, #3
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80be 	beq.w	800117a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	4b66      	ldr	r3, [pc, #408]	@ (8001198 <HAL_GPIO_Init+0x324>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	4a65      	ldr	r2, [pc, #404]	@ (8001198 <HAL_GPIO_Init+0x324>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001008:	6453      	str	r3, [r2, #68]	@ 0x44
 800100a:	4b63      	ldr	r3, [pc, #396]	@ (8001198 <HAL_GPIO_Init+0x324>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001016:	4a61      	ldr	r2, [pc, #388]	@ (800119c <HAL_GPIO_Init+0x328>)
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a58      	ldr	r2, [pc, #352]	@ (80011a0 <HAL_GPIO_Init+0x32c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d037      	beq.n	80010b2 <HAL_GPIO_Init+0x23e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a57      	ldr	r2, [pc, #348]	@ (80011a4 <HAL_GPIO_Init+0x330>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d031      	beq.n	80010ae <HAL_GPIO_Init+0x23a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a56      	ldr	r2, [pc, #344]	@ (80011a8 <HAL_GPIO_Init+0x334>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d02b      	beq.n	80010aa <HAL_GPIO_Init+0x236>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a55      	ldr	r2, [pc, #340]	@ (80011ac <HAL_GPIO_Init+0x338>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d025      	beq.n	80010a6 <HAL_GPIO_Init+0x232>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a54      	ldr	r2, [pc, #336]	@ (80011b0 <HAL_GPIO_Init+0x33c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d01f      	beq.n	80010a2 <HAL_GPIO_Init+0x22e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a53      	ldr	r2, [pc, #332]	@ (80011b4 <HAL_GPIO_Init+0x340>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d019      	beq.n	800109e <HAL_GPIO_Init+0x22a>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a52      	ldr	r2, [pc, #328]	@ (80011b8 <HAL_GPIO_Init+0x344>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x226>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a51      	ldr	r2, [pc, #324]	@ (80011bc <HAL_GPIO_Init+0x348>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x222>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a50      	ldr	r2, [pc, #320]	@ (80011c0 <HAL_GPIO_Init+0x34c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x21e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4f      	ldr	r2, [pc, #316]	@ (80011c4 <HAL_GPIO_Init+0x350>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x21a>
 800108a:	2309      	movs	r3, #9
 800108c:	e012      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 800108e:	230a      	movs	r3, #10
 8001090:	e010      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 8001092:	2308      	movs	r3, #8
 8001094:	e00e      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 8001096:	2307      	movs	r3, #7
 8001098:	e00c      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 800109a:	2306      	movs	r3, #6
 800109c:	e00a      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 800109e:	2305      	movs	r3, #5
 80010a0:	e008      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010a2:	2304      	movs	r3, #4
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010a6:	2303      	movs	r3, #3
 80010a8:	e004      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010b2:	2300      	movs	r3, #0
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	f002 0203 	and.w	r2, r2, #3
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	4093      	lsls	r3, r2
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010c4:	4935      	ldr	r1, [pc, #212]	@ (800119c <HAL_GPIO_Init+0x328>)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d2:	4b3d      	ldr	r3, [pc, #244]	@ (80011c8 <HAL_GPIO_Init+0x354>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f6:	4a34      	ldr	r2, [pc, #208]	@ (80011c8 <HAL_GPIO_Init+0x354>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010fc:	4b32      	ldr	r3, [pc, #200]	@ (80011c8 <HAL_GPIO_Init+0x354>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001120:	4a29      	ldr	r2, [pc, #164]	@ (80011c8 <HAL_GPIO_Init+0x354>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001126:	4b28      	ldr	r3, [pc, #160]	@ (80011c8 <HAL_GPIO_Init+0x354>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800114a:	4a1f      	ldr	r2, [pc, #124]	@ (80011c8 <HAL_GPIO_Init+0x354>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001150:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <HAL_GPIO_Init+0x354>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001174:	4a14      	ldr	r2, [pc, #80]	@ (80011c8 <HAL_GPIO_Init+0x354>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3301      	adds	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	2b0f      	cmp	r3, #15
 8001184:	f67f ae86 	bls.w	8000e94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3724      	adds	r7, #36	@ 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40013800 	.word	0x40013800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020c00 	.word	0x40020c00
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40021400 	.word	0x40021400
 80011b8:	40021800 	.word	0x40021800
 80011bc:	40021c00 	.word	0x40021c00
 80011c0:	40022000 	.word	0x40022000
 80011c4:	40022400 	.word	0x40022400
 80011c8:	40013c00 	.word	0x40013c00

080011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011e8:	e003      	b.n	80011f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	041a      	lsls	r2, r3, #16
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	619a      	str	r2, [r3, #24]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e29b      	b.n	800174e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8087 	beq.w	8001332 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001224:	4b96      	ldr	r3, [pc, #600]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b04      	cmp	r3, #4
 800122e:	d00c      	beq.n	800124a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001230:	4b93      	ldr	r3, [pc, #588]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 030c 	and.w	r3, r3, #12
 8001238:	2b08      	cmp	r3, #8
 800123a:	d112      	bne.n	8001262 <HAL_RCC_OscConfig+0x62>
 800123c:	4b90      	ldr	r3, [pc, #576]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001244:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001248:	d10b      	bne.n	8001262 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124a:	4b8d      	ldr	r3, [pc, #564]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d06c      	beq.n	8001330 <HAL_RCC_OscConfig+0x130>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d168      	bne.n	8001330 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e275      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800126a:	d106      	bne.n	800127a <HAL_RCC_OscConfig+0x7a>
 800126c:	4b84      	ldr	r3, [pc, #528]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a83      	ldr	r2, [pc, #524]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 8001272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	e02e      	b.n	80012d8 <HAL_RCC_OscConfig+0xd8>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0x9c>
 8001282:	4b7f      	ldr	r3, [pc, #508]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a7e      	ldr	r2, [pc, #504]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 8001288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b7c      	ldr	r3, [pc, #496]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a7b      	ldr	r2, [pc, #492]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 8001294:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e01d      	b.n	80012d8 <HAL_RCC_OscConfig+0xd8>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0xc0>
 80012a6:	4b76      	ldr	r3, [pc, #472]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a75      	ldr	r2, [pc, #468]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b73      	ldr	r3, [pc, #460]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a72      	ldr	r2, [pc, #456]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0xd8>
 80012c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 80012c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a6b      	ldr	r2, [pc, #428]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d013      	beq.n	8001308 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fc18 	bl	8000b14 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fc14 	bl	8000b14 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	@ 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e229      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b61      	ldr	r3, [pc, #388]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0xe8>
 8001306:	e014      	b.n	8001332 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff fc04 	bl	8000b14 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fc00 	bl	8000b14 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	@ 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e215      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	4b57      	ldr	r3, [pc, #348]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x110>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d069      	beq.n	8001412 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800133e:	4b50      	ldr	r3, [pc, #320]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00b      	beq.n	8001362 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134a:	4b4d      	ldr	r3, [pc, #308]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b08      	cmp	r3, #8
 8001354:	d11c      	bne.n	8001390 <HAL_RCC_OscConfig+0x190>
 8001356:	4b4a      	ldr	r3, [pc, #296]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d116      	bne.n	8001390 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001362:	4b47      	ldr	r3, [pc, #284]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <HAL_RCC_OscConfig+0x17a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e1e9      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137a:	4b41      	ldr	r3, [pc, #260]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	493d      	ldr	r1, [pc, #244]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	e040      	b.n	8001412 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d023      	beq.n	80013e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001398:	4b39      	ldr	r3, [pc, #228]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a38      	ldr	r2, [pc, #224]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a4:	f7ff fbb6 	bl	8000b14 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ac:	f7ff fbb2 	bl	8000b14 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1c7      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013be:	4b30      	ldr	r3, [pc, #192]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4929      	ldr	r1, [pc, #164]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
 80013de:	e018      	b.n	8001412 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e0:	4b27      	ldr	r3, [pc, #156]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a26      	ldr	r2, [pc, #152]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fb92 	bl	8000b14 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff fb8e 	bl	8000b14 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1a3      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d038      	beq.n	8001490 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d019      	beq.n	800145a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 8001428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800142a:	4a15      	ldr	r2, [pc, #84]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001432:	f7ff fb6f 	bl	8000b14 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143a:	f7ff fb6b 	bl	8000b14 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e180      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 800144e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x23a>
 8001458:	e01a      	b.n	8001490 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 800145c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800145e:	4a08      	ldr	r2, [pc, #32]	@ (8001480 <HAL_RCC_OscConfig+0x280>)
 8001460:	f023 0301 	bic.w	r3, r3, #1
 8001464:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001466:	f7ff fb55 	bl	8000b14 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	e00a      	b.n	8001484 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff fb51 	bl	8000b14 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d903      	bls.n	8001484 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e166      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
 8001480:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b92      	ldr	r3, [pc, #584]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1ee      	bne.n	800146e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a4 	beq.w	80015e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b8c      	ldr	r3, [pc, #560]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10d      	bne.n	80014c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b89      	ldr	r3, [pc, #548]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a88      	ldr	r2, [pc, #544]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b86      	ldr	r3, [pc, #536]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c2:	2301      	movs	r3, #1
 80014c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c6:	4b83      	ldr	r3, [pc, #524]	@ (80016d4 <HAL_RCC_OscConfig+0x4d4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d118      	bne.n	8001504 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014d2:	4b80      	ldr	r3, [pc, #512]	@ (80016d4 <HAL_RCC_OscConfig+0x4d4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a7f      	ldr	r2, [pc, #508]	@ (80016d4 <HAL_RCC_OscConfig+0x4d4>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014de:	f7ff fb19 	bl	8000b14 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e6:	f7ff fb15 	bl	8000b14 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b64      	cmp	r3, #100	@ 0x64
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e12a      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f8:	4b76      	ldr	r3, [pc, #472]	@ (80016d4 <HAL_RCC_OscConfig+0x4d4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x31a>
 800150c:	4b70      	ldr	r3, [pc, #448]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001510:	4a6f      	ldr	r2, [pc, #444]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	@ 0x70
 8001518:	e02d      	b.n	8001576 <HAL_RCC_OscConfig+0x376>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x33c>
 8001522:	4b6b      	ldr	r3, [pc, #428]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001526:	4a6a      	ldr	r2, [pc, #424]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6713      	str	r3, [r2, #112]	@ 0x70
 800152e:	4b68      	ldr	r3, [pc, #416]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001532:	4a67      	ldr	r2, [pc, #412]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6713      	str	r3, [r2, #112]	@ 0x70
 800153a:	e01c      	b.n	8001576 <HAL_RCC_OscConfig+0x376>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b05      	cmp	r3, #5
 8001542:	d10c      	bne.n	800155e <HAL_RCC_OscConfig+0x35e>
 8001544:	4b62      	ldr	r3, [pc, #392]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001548:	4a61      	ldr	r2, [pc, #388]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800154a:	f043 0304 	orr.w	r3, r3, #4
 800154e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001550:	4b5f      	ldr	r3, [pc, #380]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001554:	4a5e      	ldr	r2, [pc, #376]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6713      	str	r3, [r2, #112]	@ 0x70
 800155c:	e00b      	b.n	8001576 <HAL_RCC_OscConfig+0x376>
 800155e:	4b5c      	ldr	r3, [pc, #368]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001562:	4a5b      	ldr	r2, [pc, #364]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	6713      	str	r3, [r2, #112]	@ 0x70
 800156a:	4b59      	ldr	r3, [pc, #356]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800156e:	4a58      	ldr	r2, [pc, #352]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001570:	f023 0304 	bic.w	r3, r3, #4
 8001574:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d015      	beq.n	80015aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157e:	f7ff fac9 	bl	8000b14 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff fac5 	bl	8000b14 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001594:	4293      	cmp	r3, r2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e0d8      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159c:	4b4c      	ldr	r3, [pc, #304]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0ee      	beq.n	8001586 <HAL_RCC_OscConfig+0x386>
 80015a8:	e014      	b.n	80015d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015aa:	f7ff fab3 	bl	8000b14 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7ff faaf 	bl	8000b14 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e0c2      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c8:	4b41      	ldr	r3, [pc, #260]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1ee      	bne.n	80015b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d105      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015da:	4b3d      	ldr	r3, [pc, #244]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	4a3c      	ldr	r2, [pc, #240]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80015e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80ae 	beq.w	800174c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f0:	4b37      	ldr	r3, [pc, #220]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d06d      	beq.n	80016d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d14b      	bne.n	800169c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001604:	4b32      	ldr	r3, [pc, #200]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a31      	ldr	r2, [pc, #196]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800160a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800160e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fa80 	bl	8000b14 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fa7c 	bl	8000b14 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e091      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162a:	4b29      	ldr	r3, [pc, #164]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69da      	ldr	r2, [r3, #28]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001644:	019b      	lsls	r3, r3, #6
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164c:	085b      	lsrs	r3, r3, #1
 800164e:	3b01      	subs	r3, #1
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001658:	061b      	lsls	r3, r3, #24
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001660:	071b      	lsls	r3, r3, #28
 8001662:	491b      	ldr	r1, [pc, #108]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001668:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a18      	ldr	r2, [pc, #96]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800166e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fa4e 	bl	8000b14 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fa4a 	bl	8000b14 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e05f      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x47c>
 800169a:	e057      	b.n	800174c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0b      	ldr	r2, [pc, #44]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80016a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fa34 	bl	8000b14 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff fa30 	bl	8000b14 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e045      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4b0>
 80016ce:	e03d      	b.n	800174c <HAL_RCC_OscConfig+0x54c>
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001758 <HAL_RCC_OscConfig+0x558>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d030      	beq.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d129      	bne.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	429a      	cmp	r2, r3
 8001700:	d122      	bne.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001708:	4013      	ands	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800170e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001710:	4293      	cmp	r3, r2
 8001712:	d119      	bne.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171e:	085b      	lsrs	r3, r3, #1
 8001720:	3b01      	subs	r3, #1
 8001722:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d10f      	bne.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001732:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d107      	bne.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0d0      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001774:	4b6a      	ldr	r3, [pc, #424]	@ (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d910      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b67      	ldr	r3, [pc, #412]	@ (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 020f 	bic.w	r2, r3, #15
 800178a:	4965      	ldr	r1, [pc, #404]	@ (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b63      	ldr	r3, [pc, #396]	@ (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0b8      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b59      	ldr	r3, [pc, #356]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a58      	ldr	r2, [pc, #352]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d4:	4b53      	ldr	r3, [pc, #332]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a52      	ldr	r2, [pc, #328]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b50      	ldr	r3, [pc, #320]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	494d      	ldr	r1, [pc, #308]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d040      	beq.n	8001880 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b47      	ldr	r3, [pc, #284]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d115      	bne.n	800183e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	4b41      	ldr	r3, [pc, #260]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e073      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	4b3d      	ldr	r3, [pc, #244]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e06b      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183e:	4b39      	ldr	r3, [pc, #228]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f023 0203 	bic.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4936      	ldr	r1, [pc, #216]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001850:	f7ff f960 	bl	8000b14 <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	e00a      	b.n	800186e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7ff f95c 	bl	8000b14 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e053      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	4b2d      	ldr	r3, [pc, #180]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 020c 	and.w	r2, r3, #12
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	429a      	cmp	r2, r3
 800187e:	d1eb      	bne.n	8001858 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001880:	4b27      	ldr	r3, [pc, #156]	@ (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d210      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b24      	ldr	r3, [pc, #144]	@ (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 020f 	bic.w	r2, r3, #15
 8001896:	4922      	ldr	r1, [pc, #136]	@ (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b20      	ldr	r3, [pc, #128]	@ (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e032      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b19      	ldr	r3, [pc, #100]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4916      	ldr	r1, [pc, #88]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018da:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	490e      	ldr	r1, [pc, #56]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 f821 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	490a      	ldr	r1, [pc, #40]	@ (8001928 <HAL_RCC_ClockConfig+0x1cc>)
 8001900:	5ccb      	ldrb	r3, [r1, r3]
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	4a09      	ldr	r2, [pc, #36]	@ (800192c <HAL_RCC_ClockConfig+0x1d0>)
 8001908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <HAL_RCC_ClockConfig+0x1d4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f8bc 	bl	8000a8c <HAL_InitTick>

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00
 8001924:	40023800 	.word	0x40023800
 8001928:	08005738 	.word	0x08005738
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001938:	b090      	sub	sp, #64	@ 0x40
 800193a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001940:	2300      	movs	r3, #0
 8001942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001944:	2300      	movs	r3, #0
 8001946:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800194c:	4b59      	ldr	r3, [pc, #356]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b08      	cmp	r3, #8
 8001956:	d00d      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x40>
 8001958:	2b08      	cmp	r3, #8
 800195a:	f200 80a1 	bhi.w	8001aa0 <HAL_RCC_GetSysClockFreq+0x16c>
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x34>
 8001962:	2b04      	cmp	r3, #4
 8001964:	d003      	beq.n	800196e <HAL_RCC_GetSysClockFreq+0x3a>
 8001966:	e09b      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b53      	ldr	r3, [pc, #332]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x184>)
 800196a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800196c:	e09b      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800196e:	4b53      	ldr	r3, [pc, #332]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x188>)
 8001970:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001972:	e098      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001974:	4b4f      	ldr	r3, [pc, #316]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800197c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800197e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d028      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	099b      	lsrs	r3, r3, #6
 8001990:	2200      	movs	r2, #0
 8001992:	623b      	str	r3, [r7, #32]
 8001994:	627a      	str	r2, [r7, #36]	@ 0x24
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800199c:	2100      	movs	r1, #0
 800199e:	4b47      	ldr	r3, [pc, #284]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x188>)
 80019a0:	fb03 f201 	mul.w	r2, r3, r1
 80019a4:	2300      	movs	r3, #0
 80019a6:	fb00 f303 	mul.w	r3, r0, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	4a43      	ldr	r2, [pc, #268]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x188>)
 80019ae:	fba0 1202 	umull	r1, r2, r0, r2
 80019b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019b4:	460a      	mov	r2, r1
 80019b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80019b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ba:	4413      	add	r3, r2
 80019bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c0:	2200      	movs	r2, #0
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	61fa      	str	r2, [r7, #28]
 80019c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019ce:	f7fe fc37 	bl	8000240 <__aeabi_uldivmod>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4613      	mov	r3, r2
 80019d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019da:	e053      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019dc:	4b35      	ldr	r3, [pc, #212]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	099b      	lsrs	r3, r3, #6
 80019e2:	2200      	movs	r2, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	617a      	str	r2, [r7, #20]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019ee:	f04f 0b00 	mov.w	fp, #0
 80019f2:	4652      	mov	r2, sl
 80019f4:	465b      	mov	r3, fp
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	0159      	lsls	r1, r3, #5
 8001a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a04:	0150      	lsls	r0, r2, #5
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a0e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a26:	ebb2 0408 	subs.w	r4, r2, r8
 8001a2a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	00eb      	lsls	r3, r5, #3
 8001a38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a3c:	00e2      	lsls	r2, r4, #3
 8001a3e:	4614      	mov	r4, r2
 8001a40:	461d      	mov	r5, r3
 8001a42:	eb14 030a 	adds.w	r3, r4, sl
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	eb45 030b 	adc.w	r3, r5, fp
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	028b      	lsls	r3, r1, #10
 8001a5e:	4621      	mov	r1, r4
 8001a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a64:	4621      	mov	r1, r4
 8001a66:	028a      	lsls	r2, r1, #10
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	60fa      	str	r2, [r7, #12]
 8001a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a78:	f7fe fbe2 	bl	8000240 <__aeabi_uldivmod>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4613      	mov	r3, r2
 8001a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a84:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	0c1b      	lsrs	r3, r3, #16
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a9e:	e002      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3740      	adds	r7, #64	@ 0x40
 8001aac:	46bd      	mov	sp, r7
 8001aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	00f42400 	.word	0x00f42400
 8001abc:	017d7840 	.word	0x017d7840

08001ac0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	@ (8001ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000000 	.word	0x20000000

08001ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001adc:	f7ff fff0 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	0a9b      	lsrs	r3, r3, #10
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	4903      	ldr	r1, [pc, #12]	@ (8001afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aee:	5ccb      	ldrb	r3, [r1, r3]
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	08005748 	.word	0x08005748

08001b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b04:	f7ff ffdc 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	0b5b      	lsrs	r3, r3, #13
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	4903      	ldr	r1, [pc, #12]	@ (8001b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b16:	5ccb      	ldrb	r3, [r1, r3]
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	08005748 	.word	0x08005748

08001b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d012      	beq.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b50:	4b69      	ldr	r3, [pc, #420]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a68      	ldr	r2, [pc, #416]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b56:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001b5a:	6093      	str	r3, [r2, #8]
 8001b5c:	4b66      	ldr	r3, [pc, #408]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b64:	4964      	ldr	r1, [pc, #400]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d017      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b82:	4b5d      	ldr	r3, [pc, #372]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b88:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b90:	4959      	ldr	r1, [pc, #356]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d017      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bc4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	494a      	ldr	r1, [pc, #296]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001bea:	2301      	movs	r3, #1
 8001bec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 808b 	beq.w	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	4a39      	ldr	r2, [pc, #228]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c18:	4b37      	ldr	r3, [pc, #220]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c24:	4b35      	ldr	r3, [pc, #212]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a34      	ldr	r2, [pc, #208]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c30:	f7fe ff70 	bl	8000b14 <HAL_GetTick>
 8001c34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c38:	f7fe ff6c 	bl	8000b14 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	@ 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e38f      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c56:	4b28      	ldr	r3, [pc, #160]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d035      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d02e      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c74:	4b20      	ldr	r3, [pc, #128]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c82:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c88:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c94:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001c96:	4a18      	ldr	r2, [pc, #96]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c9c:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d114      	bne.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7fe ff34 	bl	8000b14 <HAL_GetTick>
 8001cac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb0:	f7fe ff30 	bl	8000b14 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e351      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0ee      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001cde:	d111      	bne.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ce0:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cec:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cee:	400b      	ands	r3, r1
 8001cf0:	4901      	ldr	r1, [pc, #4]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	0ffffcff 	.word	0x0ffffcff
 8001d04:	4bac      	ldr	r3, [pc, #688]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4aab      	ldr	r2, [pc, #684]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d0a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001d0e:	6093      	str	r3, [r2, #8]
 8001d10:	4ba9      	ldr	r3, [pc, #676]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1c:	49a6      	ldr	r1, [pc, #664]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d010      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d2e:	4ba2      	ldr	r3, [pc, #648]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d34:	4aa0      	ldr	r2, [pc, #640]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d3e:	4b9e      	ldr	r3, [pc, #632]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d40:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d48:	499b      	ldr	r1, [pc, #620]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00a      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d5c:	4b96      	ldr	r3, [pc, #600]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d62:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d6a:	4993      	ldr	r1, [pc, #588]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d7e:	4b8e      	ldr	r3, [pc, #568]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d8c:	498a      	ldr	r1, [pc, #552]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00a      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001da0:	4b85      	ldr	r3, [pc, #532]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001da6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dae:	4982      	ldr	r1, [pc, #520]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00a      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001dc2:	4b7d      	ldr	r3, [pc, #500]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd0:	4979      	ldr	r1, [pc, #484]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00a      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001de4:	4b74      	ldr	r3, [pc, #464]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	4971      	ldr	r1, [pc, #452]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00a      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e06:	4b6c      	ldr	r3, [pc, #432]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e0c:	f023 020c 	bic.w	r2, r3, #12
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e14:	4968      	ldr	r1, [pc, #416]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00a      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e28:	4b63      	ldr	r3, [pc, #396]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e2e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e36:	4960      	ldr	r1, [pc, #384]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e50:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e58:	4957      	ldr	r1, [pc, #348]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00a      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e6c:	4b52      	ldr	r3, [pc, #328]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e72:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7a:	494f      	ldr	r1, [pc, #316]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00a      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e94:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9c:	4946      	ldr	r1, [pc, #280]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00a      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001eb0:	4b41      	ldr	r3, [pc, #260]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebe:	493e      	ldr	r1, [pc, #248]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001ed2:	4b39      	ldr	r3, [pc, #228]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee0:	4935      	ldr	r1, [pc, #212]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ef4:	4b30      	ldr	r3, [pc, #192]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f02:	492d      	ldr	r1, [pc, #180]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d011      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f16:	4b28      	ldr	r3, [pc, #160]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f24:	4924      	ldr	r1, [pc, #144]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f34:	d101      	bne.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00a      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f56:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f64:	4914      	ldr	r1, [pc, #80]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00b      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f78:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f7e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f88:	490b      	ldr	r1, [pc, #44]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00f      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001f9c:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fac:	4902      	ldr	r1, [pc, #8]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001fb4:	e002      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00b      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001fc8:	4b8a      	ldr	r3, [pc, #552]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd8:	4986      	ldr	r1, [pc, #536]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00b      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001fec:	4b81      	ldr	r3, [pc, #516]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ff2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ffc:	497d      	ldr	r1, [pc, #500]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d006      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80d6 	beq.w	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002018:	4b76      	ldr	r3, [pc, #472]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a75      	ldr	r2, [pc, #468]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800201e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002024:	f7fe fd76 	bl	8000b14 <HAL_GetTick>
 8002028:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800202c:	f7fe fd72 	bl	8000b14 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	@ 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e195      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800203e:	4b6d      	ldr	r3, [pc, #436]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d021      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205a:	2b00      	cmp	r3, #0
 800205c:	d11d      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800205e:	4b65      	ldr	r3, [pc, #404]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002064:	0c1b      	lsrs	r3, r3, #16
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800206c:	4b61      	ldr	r3, [pc, #388]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800206e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002072:	0e1b      	lsrs	r3, r3, #24
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	019a      	lsls	r2, r3, #6
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	041b      	lsls	r3, r3, #16
 8002084:	431a      	orrs	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	071b      	lsls	r3, r3, #28
 8002092:	4958      	ldr	r1, [pc, #352]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002094:	4313      	orrs	r3, r2
 8002096:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d004      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020ae:	d00a      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d02e      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020c4:	d129      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020c6:	4b4b      	ldr	r3, [pc, #300]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020d4:	4b47      	ldr	r3, [pc, #284]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020da:	0f1b      	lsrs	r3, r3, #28
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	019a      	lsls	r2, r3, #6
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	041b      	lsls	r3, r3, #16
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	061b      	lsls	r3, r3, #24
 80020f4:	431a      	orrs	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	071b      	lsls	r3, r3, #28
 80020fa:	493e      	ldr	r1, [pc, #248]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002102:	4b3c      	ldr	r3, [pc, #240]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002108:	f023 021f 	bic.w	r2, r3, #31
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	3b01      	subs	r3, #1
 8002112:	4938      	ldr	r1, [pc, #224]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d01d      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002126:	4b33      	ldr	r3, [pc, #204]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800212c:	0e1b      	lsrs	r3, r3, #24
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002134:	4b2f      	ldr	r3, [pc, #188]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002136:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800213a:	0f1b      	lsrs	r3, r3, #28
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	019a      	lsls	r2, r3, #6
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	041b      	lsls	r3, r3, #16
 800214e:	431a      	orrs	r2, r3
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	061b      	lsls	r3, r3, #24
 8002154:	431a      	orrs	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	071b      	lsls	r3, r3, #28
 800215a:	4926      	ldr	r1, [pc, #152]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d011      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	019a      	lsls	r2, r3, #6
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	041b      	lsls	r3, r3, #16
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	061b      	lsls	r3, r3, #24
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	071b      	lsls	r3, r3, #28
 800218a:	491a      	ldr	r1, [pc, #104]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002192:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a17      	ldr	r2, [pc, #92]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002198:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800219c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800219e:	f7fe fcb9 	bl	8000b14 <HAL_GetTick>
 80021a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021a6:	f7fe fcb5 	bl	8000b14 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b64      	cmp	r3, #100	@ 0x64
 80021b2:	d901      	bls.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e0d8      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021b8:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	f040 80ce 	bne.w	8002368 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80021cc:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a08      	ldr	r2, [pc, #32]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d8:	f7fe fc9c 	bl	8000b14 <HAL_GetTick>
 80021dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021de:	e00b      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021e0:	f7fe fc98 	bl	8000b14 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	@ 0x64
 80021ec:	d904      	bls.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e0bb      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002204:	d0ec      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002222:	2b00      	cmp	r3, #0
 8002224:	d02e      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	2b00      	cmp	r3, #0
 800222c:	d12a      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800222e:	4b51      	ldr	r3, [pc, #324]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800223c:	4b4d      	ldr	r3, [pc, #308]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002242:	0f1b      	lsrs	r3, r3, #28
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	019a      	lsls	r2, r3, #6
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	061b      	lsls	r3, r3, #24
 800225c:	431a      	orrs	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	071b      	lsls	r3, r3, #28
 8002262:	4944      	ldr	r1, [pc, #272]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800226a:	4b42      	ldr	r3, [pc, #264]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800226c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002270:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	3b01      	subs	r3, #1
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	493d      	ldr	r1, [pc, #244]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d022      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002294:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002298:	d11d      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800229a:	4b36      	ldr	r3, [pc, #216]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a0:	0e1b      	lsrs	r3, r3, #24
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022a8:	4b32      	ldr	r3, [pc, #200]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	0f1b      	lsrs	r3, r3, #28
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	019a      	lsls	r2, r3, #6
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	041b      	lsls	r3, r3, #16
 80022c2:	431a      	orrs	r2, r3
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	061b      	lsls	r3, r3, #24
 80022c8:	431a      	orrs	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	071b      	lsls	r3, r3, #28
 80022ce:	4929      	ldr	r1, [pc, #164]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d028      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022e2:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e8:	0e1b      	lsrs	r3, r3, #24
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022f0:	4b20      	ldr	r3, [pc, #128]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f6:	0c1b      	lsrs	r3, r3, #16
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	019a      	lsls	r2, r3, #6
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	041b      	lsls	r3, r3, #16
 8002308:	431a      	orrs	r2, r3
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	071b      	lsls	r3, r3, #28
 8002316:	4917      	ldr	r1, [pc, #92]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800231e:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002324:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232c:	4911      	ldr	r1, [pc, #68]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002334:	4b0f      	ldr	r3, [pc, #60]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0e      	ldr	r2, [pc, #56]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800233a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800233e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002340:	f7fe fbe8 	bl	8000b14 <HAL_GetTick>
 8002344:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002348:	f7fe fbe4 	bl	8000b14 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	@ 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e007      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002366:	d1ef      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3720      	adds	r7, #32
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800

08002378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e040      	b.n	800240c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe fa94 	bl	80008c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2224      	movs	r2, #36	@ 0x24
 80023a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fdfc 	bl	8002fbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 fb95 	bl	8002af4 <UART_SetConfig>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e01b      	b.n	800240c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fe7b 	bl	8003100 <UART_CheckIdleState>
 800240a:	4603      	mov	r3, r0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	@ 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	4613      	mov	r3, r2
 8002420:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002428:	2b20      	cmp	r3, #32
 800242a:	d132      	bne.n	8002492 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_UART_Receive_IT+0x24>
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e02b      	b.n	8002494 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d018      	beq.n	8002482 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	e853 3f00 	ldrex	r3, [r3]
 800245c:	613b      	str	r3, [r7, #16]
   return(result);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246e:	623b      	str	r3, [r7, #32]
 8002470:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002472:	69f9      	ldr	r1, [r7, #28]
 8002474:	6a3a      	ldr	r2, [r7, #32]
 8002476:	e841 2300 	strex	r3, r2, [r1]
 800247a:	61bb      	str	r3, [r7, #24]
   return(result);
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1e6      	bne.n	8002450 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	461a      	mov	r2, r3
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 ff4f 	bl	800332c <UART_Start_Receive_IT>
 800248e:	4603      	mov	r3, r0
 8002490:	e000      	b.n	8002494 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002492:	2302      	movs	r3, #2
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3728      	adds	r7, #40	@ 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b0ba      	sub	sp, #232	@ 0xe8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80024c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80024ca:	4013      	ands	r3, r2
 80024cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80024d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d115      	bne.n	8002504 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00f      	beq.n	8002504 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d009      	beq.n	8002504 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 82c6 	beq.w	8002a86 <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
      }
      return;
 8002502:	e2c0      	b.n	8002a86 <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8117 	beq.w	800273c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800250e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800251a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800251e:	4b85      	ldr	r3, [pc, #532]	@ (8002734 <HAL_UART_IRQHandler+0x298>)
 8002520:	4013      	ands	r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 810a 	beq.w	800273c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d011      	beq.n	8002558 <HAL_UART_IRQHandler+0xbc>
 8002534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00b      	beq.n	8002558 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2201      	movs	r2, #1
 8002546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800254e:	f043 0201 	orr.w	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d011      	beq.n	8002588 <HAL_UART_IRQHandler+0xec>
 8002564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2202      	movs	r2, #2
 8002576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800257e:	f043 0204 	orr.w	r2, r3, #4
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d011      	beq.n	80025b8 <HAL_UART_IRQHandler+0x11c>
 8002594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2204      	movs	r2, #4
 80025a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025ae:	f043 0202 	orr.w	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80025b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d017      	beq.n	80025f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d105      	bne.n	80025dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80025d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00b      	beq.n	80025f4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2208      	movs	r2, #8
 80025e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025ea:	f043 0208 	orr.w	r2, r3, #8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d012      	beq.n	8002626 <HAL_UART_IRQHandler+0x18a>
 8002600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002604:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00c      	beq.n	8002626 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002614:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 822c 	beq.w	8002a8a <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00d      	beq.n	800265a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800263e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002660:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266e:	2b40      	cmp	r3, #64	@ 0x40
 8002670:	d005      	beq.n	800267e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002676:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800267a:	2b00      	cmp	r3, #0
 800267c:	d04f      	beq.n	800271e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 ff1a 	bl	80034b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268e:	2b40      	cmp	r3, #64	@ 0x40
 8002690:	d141      	bne.n	8002716 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3308      	adds	r3, #8
 8002698:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026a0:	e853 3f00 	ldrex	r3, [r3]
 80026a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80026a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3308      	adds	r3, #8
 80026ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80026be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80026c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80026ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80026ce:	e841 2300 	strex	r3, r2, [r1]
 80026d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80026d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1d9      	bne.n	8002692 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d013      	beq.n	800270e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ea:	4a13      	ldr	r2, [pc, #76]	@ (8002738 <HAL_UART_IRQHandler+0x29c>)
 80026ec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fb9b 	bl	8000e2e <HAL_DMA_Abort_IT>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d017      	beq.n	800272e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002708:	4610      	mov	r0, r2
 800270a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800270c:	e00f      	b.n	800272e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f9d0 	bl	8002ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002714:	e00b      	b.n	800272e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f9cc 	bl	8002ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800271c:	e007      	b.n	800272e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f9c8 	bl	8002ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800272c:	e1ad      	b.n	8002a8a <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272e:	bf00      	nop
    return;
 8002730:	e1ab      	b.n	8002a8a <HAL_UART_IRQHandler+0x5ee>
 8002732:	bf00      	nop
 8002734:	04000120 	.word	0x04000120
 8002738:	08003581 	.word	0x08003581

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002740:	2b01      	cmp	r3, #1
 8002742:	f040 8166 	bne.w	8002a12 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 815f 	beq.w	8002a12 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8158 	beq.w	8002a12 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2210      	movs	r2, #16
 8002768:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002774:	2b40      	cmp	r3, #64	@ 0x40
 8002776:	f040 80d0 	bne.w	800291a <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002786:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80ab 	beq.w	80028e6 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800279a:	429a      	cmp	r2, r3
 800279c:	f080 80a3 	bcs.w	80028e6 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027b4:	f000 8086 	beq.w	80028c4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027c4:	e853 3f00 	ldrex	r3, [r3]
 80027c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80027cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80027ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027f2:	e841 2300 	strex	r3, r2, [r1]
 80027f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80027fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1da      	bne.n	80027b8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	3308      	adds	r3, #8
 8002808:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800280c:	e853 3f00 	ldrex	r3, [r3]
 8002810:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002812:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	3308      	adds	r3, #8
 8002822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002826:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800282a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800282e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002832:	e841 2300 	strex	r3, r2, [r1]
 8002836:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1e1      	bne.n	8002802 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3308      	adds	r3, #8
 8002844:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002846:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002848:	e853 3f00 	ldrex	r3, [r3]
 800284c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800284e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002854:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3308      	adds	r3, #8
 800285e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002862:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002864:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002866:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002868:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800286a:	e841 2300 	strex	r3, r2, [r1]
 800286e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1e3      	bne.n	800283e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800288c:	e853 3f00 	ldrex	r3, [r3]
 8002890:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002894:	f023 0310 	bic.w	r3, r3, #16
 8002898:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80028ae:	e841 2300 	strex	r3, r2, [r1]
 80028b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80028b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e4      	bne.n	8002884 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe fa45 	bl	8000d4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	b29b      	uxth	r3, r3
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f8f2 	bl	8002ac8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80028e4:	e0d3      	b.n	8002a8e <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80028ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028f0:	429a      	cmp	r2, r3
 80028f2:	f040 80cc 	bne.w	8002a8e <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002900:	f040 80c5 	bne.w	8002a8e <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002910:	4619      	mov	r1, r3
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f8d8 	bl	8002ac8 <HAL_UARTEx_RxEventCallback>
      return;
 8002918:	e0b9      	b.n	8002a8e <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002926:	b29b      	uxth	r3, r3
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 80ab 	beq.w	8002a92 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 800293c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80a6 	beq.w	8002a92 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800294e:	e853 3f00 	ldrex	r3, [r3]
 8002952:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002956:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800295a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002968:	647b      	str	r3, [r7, #68]	@ 0x44
 800296a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800296e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002970:	e841 2300 	strex	r3, r2, [r1]
 8002974:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e4      	bne.n	8002946 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3308      	adds	r3, #8
 8002982:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	e853 3f00 	ldrex	r3, [r3]
 800298a:	623b      	str	r3, [r7, #32]
   return(result);
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3308      	adds	r3, #8
 800299c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80029a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80029a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029a8:	e841 2300 	strex	r3, r2, [r1]
 80029ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80029ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1e3      	bne.n	800297c <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	e853 3f00 	ldrex	r3, [r3]
 80029d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f023 0310 	bic.w	r3, r3, #16
 80029dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029ea:	61fb      	str	r3, [r7, #28]
 80029ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ee:	69b9      	ldr	r1, [r7, #24]
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	e841 2300 	strex	r3, r2, [r1]
 80029f6:	617b      	str	r3, [r7, #20]
   return(result);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1e4      	bne.n	80029c8 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2202      	movs	r2, #2
 8002a02:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a08:	4619      	mov	r1, r3
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f85c 	bl	8002ac8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a10:	e03f      	b.n	8002a92 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00e      	beq.n	8002a3c <HAL_UART_IRQHandler+0x5a0>
 8002a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002a32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f853 	bl	8002ae0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a3a:	e02d      	b.n	8002a98 <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00e      	beq.n	8002a66 <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d01c      	beq.n	8002a96 <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4798      	blx	r3
    }
    return;
 8002a64:	e017      	b.n	8002a96 <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d012      	beq.n	8002a98 <HAL_UART_IRQHandler+0x5fc>
 8002a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00c      	beq.n	8002a98 <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fd90 	bl	80035a4 <UART_EndTransmit_IT>
    return;
 8002a84:	e008      	b.n	8002a98 <HAL_UART_IRQHandler+0x5fc>
      return;
 8002a86:	bf00      	nop
 8002a88:	e006      	b.n	8002a98 <HAL_UART_IRQHandler+0x5fc>
    return;
 8002a8a:	bf00      	nop
 8002a8c:	e004      	b.n	8002a98 <HAL_UART_IRQHandler+0x5fc>
      return;
 8002a8e:	bf00      	nop
 8002a90:	e002      	b.n	8002a98 <HAL_UART_IRQHandler+0x5fc>
      return;
 8002a92:	bf00      	nop
 8002a94:	e000      	b.n	8002a98 <HAL_UART_IRQHandler+0x5fc>
    return;
 8002a96:	bf00      	nop
  }

}
 8002a98:	37e8      	adds	r7, #232	@ 0xe8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop

08002aa0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	4ba6      	ldr	r3, [pc, #664]	@ (8002db8 <UART_SetConfig+0x2c4>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	6979      	ldr	r1, [r7, #20]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a94      	ldr	r2, [pc, #592]	@ (8002dbc <UART_SetConfig+0x2c8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d120      	bne.n	8002bb2 <UART_SetConfig+0xbe>
 8002b70:	4b93      	ldr	r3, [pc, #588]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d816      	bhi.n	8002bac <UART_SetConfig+0xb8>
 8002b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b84 <UART_SetConfig+0x90>)
 8002b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b84:	08002b95 	.word	0x08002b95
 8002b88:	08002ba1 	.word	0x08002ba1
 8002b8c:	08002b9b 	.word	0x08002b9b
 8002b90:	08002ba7 	.word	0x08002ba7
 8002b94:	2301      	movs	r3, #1
 8002b96:	77fb      	strb	r3, [r7, #31]
 8002b98:	e150      	b.n	8002e3c <UART_SetConfig+0x348>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	77fb      	strb	r3, [r7, #31]
 8002b9e:	e14d      	b.n	8002e3c <UART_SetConfig+0x348>
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	77fb      	strb	r3, [r7, #31]
 8002ba4:	e14a      	b.n	8002e3c <UART_SetConfig+0x348>
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	77fb      	strb	r3, [r7, #31]
 8002baa:	e147      	b.n	8002e3c <UART_SetConfig+0x348>
 8002bac:	2310      	movs	r3, #16
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e144      	b.n	8002e3c <UART_SetConfig+0x348>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a83      	ldr	r2, [pc, #524]	@ (8002dc4 <UART_SetConfig+0x2d0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d132      	bne.n	8002c22 <UART_SetConfig+0x12e>
 8002bbc:	4b80      	ldr	r3, [pc, #512]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d828      	bhi.n	8002c1c <UART_SetConfig+0x128>
 8002bca:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd0 <UART_SetConfig+0xdc>)
 8002bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd0:	08002c05 	.word	0x08002c05
 8002bd4:	08002c1d 	.word	0x08002c1d
 8002bd8:	08002c1d 	.word	0x08002c1d
 8002bdc:	08002c1d 	.word	0x08002c1d
 8002be0:	08002c11 	.word	0x08002c11
 8002be4:	08002c1d 	.word	0x08002c1d
 8002be8:	08002c1d 	.word	0x08002c1d
 8002bec:	08002c1d 	.word	0x08002c1d
 8002bf0:	08002c0b 	.word	0x08002c0b
 8002bf4:	08002c1d 	.word	0x08002c1d
 8002bf8:	08002c1d 	.word	0x08002c1d
 8002bfc:	08002c1d 	.word	0x08002c1d
 8002c00:	08002c17 	.word	0x08002c17
 8002c04:	2300      	movs	r3, #0
 8002c06:	77fb      	strb	r3, [r7, #31]
 8002c08:	e118      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	77fb      	strb	r3, [r7, #31]
 8002c0e:	e115      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c10:	2304      	movs	r3, #4
 8002c12:	77fb      	strb	r3, [r7, #31]
 8002c14:	e112      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c16:	2308      	movs	r3, #8
 8002c18:	77fb      	strb	r3, [r7, #31]
 8002c1a:	e10f      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	77fb      	strb	r3, [r7, #31]
 8002c20:	e10c      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a68      	ldr	r2, [pc, #416]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d120      	bne.n	8002c6e <UART_SetConfig+0x17a>
 8002c2c:	4b64      	ldr	r3, [pc, #400]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c32:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002c36:	2b30      	cmp	r3, #48	@ 0x30
 8002c38:	d013      	beq.n	8002c62 <UART_SetConfig+0x16e>
 8002c3a:	2b30      	cmp	r3, #48	@ 0x30
 8002c3c:	d814      	bhi.n	8002c68 <UART_SetConfig+0x174>
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d009      	beq.n	8002c56 <UART_SetConfig+0x162>
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d810      	bhi.n	8002c68 <UART_SetConfig+0x174>
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <UART_SetConfig+0x15c>
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d006      	beq.n	8002c5c <UART_SetConfig+0x168>
 8002c4e:	e00b      	b.n	8002c68 <UART_SetConfig+0x174>
 8002c50:	2300      	movs	r3, #0
 8002c52:	77fb      	strb	r3, [r7, #31]
 8002c54:	e0f2      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c56:	2302      	movs	r3, #2
 8002c58:	77fb      	strb	r3, [r7, #31]
 8002c5a:	e0ef      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	77fb      	strb	r3, [r7, #31]
 8002c60:	e0ec      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c62:	2308      	movs	r3, #8
 8002c64:	77fb      	strb	r3, [r7, #31]
 8002c66:	e0e9      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c68:	2310      	movs	r3, #16
 8002c6a:	77fb      	strb	r3, [r7, #31]
 8002c6c:	e0e6      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a56      	ldr	r2, [pc, #344]	@ (8002dcc <UART_SetConfig+0x2d8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d120      	bne.n	8002cba <UART_SetConfig+0x1c6>
 8002c78:	4b51      	ldr	r3, [pc, #324]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002c82:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c84:	d013      	beq.n	8002cae <UART_SetConfig+0x1ba>
 8002c86:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c88:	d814      	bhi.n	8002cb4 <UART_SetConfig+0x1c0>
 8002c8a:	2b80      	cmp	r3, #128	@ 0x80
 8002c8c:	d009      	beq.n	8002ca2 <UART_SetConfig+0x1ae>
 8002c8e:	2b80      	cmp	r3, #128	@ 0x80
 8002c90:	d810      	bhi.n	8002cb4 <UART_SetConfig+0x1c0>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <UART_SetConfig+0x1a8>
 8002c96:	2b40      	cmp	r3, #64	@ 0x40
 8002c98:	d006      	beq.n	8002ca8 <UART_SetConfig+0x1b4>
 8002c9a:	e00b      	b.n	8002cb4 <UART_SetConfig+0x1c0>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	77fb      	strb	r3, [r7, #31]
 8002ca0:	e0cc      	b.n	8002e3c <UART_SetConfig+0x348>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	77fb      	strb	r3, [r7, #31]
 8002ca6:	e0c9      	b.n	8002e3c <UART_SetConfig+0x348>
 8002ca8:	2304      	movs	r3, #4
 8002caa:	77fb      	strb	r3, [r7, #31]
 8002cac:	e0c6      	b.n	8002e3c <UART_SetConfig+0x348>
 8002cae:	2308      	movs	r3, #8
 8002cb0:	77fb      	strb	r3, [r7, #31]
 8002cb2:	e0c3      	b.n	8002e3c <UART_SetConfig+0x348>
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	77fb      	strb	r3, [r7, #31]
 8002cb8:	e0c0      	b.n	8002e3c <UART_SetConfig+0x348>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a44      	ldr	r2, [pc, #272]	@ (8002dd0 <UART_SetConfig+0x2dc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d125      	bne.n	8002d10 <UART_SetConfig+0x21c>
 8002cc4:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cd2:	d017      	beq.n	8002d04 <UART_SetConfig+0x210>
 8002cd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cd8:	d817      	bhi.n	8002d0a <UART_SetConfig+0x216>
 8002cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cde:	d00b      	beq.n	8002cf8 <UART_SetConfig+0x204>
 8002ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ce4:	d811      	bhi.n	8002d0a <UART_SetConfig+0x216>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <UART_SetConfig+0x1fe>
 8002cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cee:	d006      	beq.n	8002cfe <UART_SetConfig+0x20a>
 8002cf0:	e00b      	b.n	8002d0a <UART_SetConfig+0x216>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	77fb      	strb	r3, [r7, #31]
 8002cf6:	e0a1      	b.n	8002e3c <UART_SetConfig+0x348>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	77fb      	strb	r3, [r7, #31]
 8002cfc:	e09e      	b.n	8002e3c <UART_SetConfig+0x348>
 8002cfe:	2304      	movs	r3, #4
 8002d00:	77fb      	strb	r3, [r7, #31]
 8002d02:	e09b      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d04:	2308      	movs	r3, #8
 8002d06:	77fb      	strb	r3, [r7, #31]
 8002d08:	e098      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d0a:	2310      	movs	r3, #16
 8002d0c:	77fb      	strb	r3, [r7, #31]
 8002d0e:	e095      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd4 <UART_SetConfig+0x2e0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d125      	bne.n	8002d66 <UART_SetConfig+0x272>
 8002d1a:	4b29      	ldr	r3, [pc, #164]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d28:	d017      	beq.n	8002d5a <UART_SetConfig+0x266>
 8002d2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d2e:	d817      	bhi.n	8002d60 <UART_SetConfig+0x26c>
 8002d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d34:	d00b      	beq.n	8002d4e <UART_SetConfig+0x25a>
 8002d36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d3a:	d811      	bhi.n	8002d60 <UART_SetConfig+0x26c>
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <UART_SetConfig+0x254>
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d44:	d006      	beq.n	8002d54 <UART_SetConfig+0x260>
 8002d46:	e00b      	b.n	8002d60 <UART_SetConfig+0x26c>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	e076      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	77fb      	strb	r3, [r7, #31]
 8002d52:	e073      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d54:	2304      	movs	r3, #4
 8002d56:	77fb      	strb	r3, [r7, #31]
 8002d58:	e070      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	77fb      	strb	r3, [r7, #31]
 8002d5e:	e06d      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d60:	2310      	movs	r3, #16
 8002d62:	77fb      	strb	r3, [r7, #31]
 8002d64:	e06a      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd8 <UART_SetConfig+0x2e4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d138      	bne.n	8002de2 <UART_SetConfig+0x2ee>
 8002d70:	4b13      	ldr	r3, [pc, #76]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002d7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d7e:	d017      	beq.n	8002db0 <UART_SetConfig+0x2bc>
 8002d80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d84:	d82a      	bhi.n	8002ddc <UART_SetConfig+0x2e8>
 8002d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d8a:	d00b      	beq.n	8002da4 <UART_SetConfig+0x2b0>
 8002d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d90:	d824      	bhi.n	8002ddc <UART_SetConfig+0x2e8>
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <UART_SetConfig+0x2aa>
 8002d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d9a:	d006      	beq.n	8002daa <UART_SetConfig+0x2b6>
 8002d9c:	e01e      	b.n	8002ddc <UART_SetConfig+0x2e8>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	77fb      	strb	r3, [r7, #31]
 8002da2:	e04b      	b.n	8002e3c <UART_SetConfig+0x348>
 8002da4:	2302      	movs	r3, #2
 8002da6:	77fb      	strb	r3, [r7, #31]
 8002da8:	e048      	b.n	8002e3c <UART_SetConfig+0x348>
 8002daa:	2304      	movs	r3, #4
 8002dac:	77fb      	strb	r3, [r7, #31]
 8002dae:	e045      	b.n	8002e3c <UART_SetConfig+0x348>
 8002db0:	2308      	movs	r3, #8
 8002db2:	77fb      	strb	r3, [r7, #31]
 8002db4:	e042      	b.n	8002e3c <UART_SetConfig+0x348>
 8002db6:	bf00      	nop
 8002db8:	efff69f3 	.word	0xefff69f3
 8002dbc:	40011000 	.word	0x40011000
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40004400 	.word	0x40004400
 8002dc8:	40004800 	.word	0x40004800
 8002dcc:	40004c00 	.word	0x40004c00
 8002dd0:	40005000 	.word	0x40005000
 8002dd4:	40011400 	.word	0x40011400
 8002dd8:	40007800 	.word	0x40007800
 8002ddc:	2310      	movs	r3, #16
 8002dde:	77fb      	strb	r3, [r7, #31]
 8002de0:	e02c      	b.n	8002e3c <UART_SetConfig+0x348>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a72      	ldr	r2, [pc, #456]	@ (8002fb0 <UART_SetConfig+0x4bc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d125      	bne.n	8002e38 <UART_SetConfig+0x344>
 8002dec:	4b71      	ldr	r3, [pc, #452]	@ (8002fb4 <UART_SetConfig+0x4c0>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002df6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002dfa:	d017      	beq.n	8002e2c <UART_SetConfig+0x338>
 8002dfc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002e00:	d817      	bhi.n	8002e32 <UART_SetConfig+0x33e>
 8002e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e06:	d00b      	beq.n	8002e20 <UART_SetConfig+0x32c>
 8002e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e0c:	d811      	bhi.n	8002e32 <UART_SetConfig+0x33e>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <UART_SetConfig+0x326>
 8002e12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e16:	d006      	beq.n	8002e26 <UART_SetConfig+0x332>
 8002e18:	e00b      	b.n	8002e32 <UART_SetConfig+0x33e>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	e00d      	b.n	8002e3c <UART_SetConfig+0x348>
 8002e20:	2302      	movs	r3, #2
 8002e22:	77fb      	strb	r3, [r7, #31]
 8002e24:	e00a      	b.n	8002e3c <UART_SetConfig+0x348>
 8002e26:	2304      	movs	r3, #4
 8002e28:	77fb      	strb	r3, [r7, #31]
 8002e2a:	e007      	b.n	8002e3c <UART_SetConfig+0x348>
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	77fb      	strb	r3, [r7, #31]
 8002e30:	e004      	b.n	8002e3c <UART_SetConfig+0x348>
 8002e32:	2310      	movs	r3, #16
 8002e34:	77fb      	strb	r3, [r7, #31]
 8002e36:	e001      	b.n	8002e3c <UART_SetConfig+0x348>
 8002e38:	2310      	movs	r3, #16
 8002e3a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e44:	d15b      	bne.n	8002efe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002e46:	7ffb      	ldrb	r3, [r7, #31]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d828      	bhi.n	8002e9e <UART_SetConfig+0x3aa>
 8002e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e54 <UART_SetConfig+0x360>)
 8002e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e52:	bf00      	nop
 8002e54:	08002e79 	.word	0x08002e79
 8002e58:	08002e81 	.word	0x08002e81
 8002e5c:	08002e89 	.word	0x08002e89
 8002e60:	08002e9f 	.word	0x08002e9f
 8002e64:	08002e8f 	.word	0x08002e8f
 8002e68:	08002e9f 	.word	0x08002e9f
 8002e6c:	08002e9f 	.word	0x08002e9f
 8002e70:	08002e9f 	.word	0x08002e9f
 8002e74:	08002e97 	.word	0x08002e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e78:	f7fe fe2e 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 8002e7c:	61b8      	str	r0, [r7, #24]
        break;
 8002e7e:	e013      	b.n	8002ea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e80:	f7fe fe3e 	bl	8001b00 <HAL_RCC_GetPCLK2Freq>
 8002e84:	61b8      	str	r0, [r7, #24]
        break;
 8002e86:	e00f      	b.n	8002ea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e88:	4b4b      	ldr	r3, [pc, #300]	@ (8002fb8 <UART_SetConfig+0x4c4>)
 8002e8a:	61bb      	str	r3, [r7, #24]
        break;
 8002e8c:	e00c      	b.n	8002ea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e8e:	f7fe fd51 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 8002e92:	61b8      	str	r0, [r7, #24]
        break;
 8002e94:	e008      	b.n	8002ea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e9a:	61bb      	str	r3, [r7, #24]
        break;
 8002e9c:	e004      	b.n	8002ea8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	77bb      	strb	r3, [r7, #30]
        break;
 8002ea6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d074      	beq.n	8002f98 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	005a      	lsls	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	085b      	lsrs	r3, r3, #1
 8002eb8:	441a      	add	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b0f      	cmp	r3, #15
 8002ec8:	d916      	bls.n	8002ef8 <UART_SetConfig+0x404>
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed0:	d212      	bcs.n	8002ef8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f023 030f 	bic.w	r3, r3, #15
 8002eda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	89fb      	ldrh	r3, [r7, #14]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	89fa      	ldrh	r2, [r7, #14]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	e04f      	b.n	8002f98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	77bb      	strb	r3, [r7, #30]
 8002efc:	e04c      	b.n	8002f98 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002efe:	7ffb      	ldrb	r3, [r7, #31]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d828      	bhi.n	8002f56 <UART_SetConfig+0x462>
 8002f04:	a201      	add	r2, pc, #4	@ (adr r2, 8002f0c <UART_SetConfig+0x418>)
 8002f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f31 	.word	0x08002f31
 8002f10:	08002f39 	.word	0x08002f39
 8002f14:	08002f41 	.word	0x08002f41
 8002f18:	08002f57 	.word	0x08002f57
 8002f1c:	08002f47 	.word	0x08002f47
 8002f20:	08002f57 	.word	0x08002f57
 8002f24:	08002f57 	.word	0x08002f57
 8002f28:	08002f57 	.word	0x08002f57
 8002f2c:	08002f4f 	.word	0x08002f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f30:	f7fe fdd2 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 8002f34:	61b8      	str	r0, [r7, #24]
        break;
 8002f36:	e013      	b.n	8002f60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f38:	f7fe fde2 	bl	8001b00 <HAL_RCC_GetPCLK2Freq>
 8002f3c:	61b8      	str	r0, [r7, #24]
        break;
 8002f3e:	e00f      	b.n	8002f60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f40:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb8 <UART_SetConfig+0x4c4>)
 8002f42:	61bb      	str	r3, [r7, #24]
        break;
 8002f44:	e00c      	b.n	8002f60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f46:	f7fe fcf5 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 8002f4a:	61b8      	str	r0, [r7, #24]
        break;
 8002f4c:	e008      	b.n	8002f60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f52:	61bb      	str	r3, [r7, #24]
        break;
 8002f54:	e004      	b.n	8002f60 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	77bb      	strb	r3, [r7, #30]
        break;
 8002f5e:	bf00      	nop
    }

    if (pclk != 0U)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d018      	beq.n	8002f98 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	085a      	lsrs	r2, r3, #1
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	441a      	add	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b0f      	cmp	r3, #15
 8002f7e:	d909      	bls.n	8002f94 <UART_SetConfig+0x4a0>
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f86:	d205      	bcs.n	8002f94 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	e001      	b.n	8002f98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002fa4:	7fbb      	ldrb	r3, [r7, #30]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40007c00 	.word	0x40007c00
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	00f42400 	.word	0x00f42400

08002fbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01a      	beq.n	80030d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030ba:	d10a      	bne.n	80030d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
  }
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b098      	sub	sp, #96	@ 0x60
 8003104:	af02      	add	r7, sp, #8
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003110:	f7fd fd00 	bl	8000b14 <HAL_GetTick>
 8003114:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b08      	cmp	r3, #8
 8003122:	d12e      	bne.n	8003182 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003124:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800312c:	2200      	movs	r2, #0
 800312e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f88c 	bl	8003250 <UART_WaitOnFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d021      	beq.n	8003182 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003146:	e853 3f00 	ldrex	r3, [r3]
 800314a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800314c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003152:	653b      	str	r3, [r7, #80]	@ 0x50
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800315c:	647b      	str	r3, [r7, #68]	@ 0x44
 800315e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003160:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003162:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003164:	e841 2300 	strex	r3, r2, [r1]
 8003168:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800316a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e6      	bne.n	800313e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e062      	b.n	8003248 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b04      	cmp	r3, #4
 800318e:	d149      	bne.n	8003224 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003190:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003198:	2200      	movs	r2, #0
 800319a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f856 	bl	8003250 <UART_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d03c      	beq.n	8003224 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	623b      	str	r3, [r7, #32]
   return(result);
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031d0:	e841 2300 	strex	r3, r2, [r1]
 80031d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e6      	bne.n	80031aa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3308      	adds	r3, #8
 80031e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	e853 3f00 	ldrex	r3, [r3]
 80031ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3308      	adds	r3, #8
 80031fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031fc:	61fa      	str	r2, [r7, #28]
 80031fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	69b9      	ldr	r1, [r7, #24]
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	e841 2300 	strex	r3, r2, [r1]
 8003208:	617b      	str	r3, [r7, #20]
   return(result);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e5      	bne.n	80031dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e011      	b.n	8003248 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3758      	adds	r7, #88	@ 0x58
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003260:	e04f      	b.n	8003302 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d04b      	beq.n	8003302 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326a:	f7fd fc53 	bl	8000b14 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <UART_WaitOnFlagUntilTimeout+0x30>
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e04e      	b.n	8003322 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d037      	beq.n	8003302 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b80      	cmp	r3, #128	@ 0x80
 8003296:	d034      	beq.n	8003302 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b40      	cmp	r3, #64	@ 0x40
 800329c:	d031      	beq.n	8003302 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d110      	bne.n	80032ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2208      	movs	r2, #8
 80032b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f8ff 	bl	80034b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2208      	movs	r2, #8
 80032be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e029      	b.n	8003322 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032dc:	d111      	bne.n	8003302 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f8e5 	bl	80034b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e00f      	b.n	8003322 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69da      	ldr	r2, [r3, #28]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4013      	ands	r3, r2
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	429a      	cmp	r2, r3
 8003310:	bf0c      	ite	eq
 8003312:	2301      	moveq	r3, #1
 8003314:	2300      	movne	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	429a      	cmp	r2, r3
 800331e:	d0a0      	beq.n	8003262 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800332c:	b480      	push	{r7}
 800332e:	b097      	sub	sp, #92	@ 0x5c
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	88fa      	ldrh	r2, [r7, #6]
 8003344:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	88fa      	ldrh	r2, [r7, #6]
 800334c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800335e:	d10e      	bne.n	800337e <UART_Start_Receive_IT+0x52>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d105      	bne.n	8003374 <UART_Start_Receive_IT+0x48>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800336e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003372:	e02d      	b.n	80033d0 <UART_Start_Receive_IT+0xa4>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	22ff      	movs	r2, #255	@ 0xff
 8003378:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800337c:	e028      	b.n	80033d0 <UART_Start_Receive_IT+0xa4>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10d      	bne.n	80033a2 <UART_Start_Receive_IT+0x76>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d104      	bne.n	8003398 <UART_Start_Receive_IT+0x6c>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	22ff      	movs	r2, #255	@ 0xff
 8003392:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003396:	e01b      	b.n	80033d0 <UART_Start_Receive_IT+0xa4>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	227f      	movs	r2, #127	@ 0x7f
 800339c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033a0:	e016      	b.n	80033d0 <UART_Start_Receive_IT+0xa4>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033aa:	d10d      	bne.n	80033c8 <UART_Start_Receive_IT+0x9c>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d104      	bne.n	80033be <UART_Start_Receive_IT+0x92>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	227f      	movs	r2, #127	@ 0x7f
 80033b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033bc:	e008      	b.n	80033d0 <UART_Start_Receive_IT+0xa4>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	223f      	movs	r2, #63	@ 0x3f
 80033c2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033c6:	e003      	b.n	80033d0 <UART_Start_Receive_IT+0xa4>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2222      	movs	r2, #34	@ 0x22
 80033dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3308      	adds	r3, #8
 80033e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3308      	adds	r3, #8
 80033fe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003400:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003402:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003406:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800340e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e5      	bne.n	80033e0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800341c:	d107      	bne.n	800342e <UART_Start_Receive_IT+0x102>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4a21      	ldr	r2, [pc, #132]	@ (80034b0 <UART_Start_Receive_IT+0x184>)
 800342a:	669a      	str	r2, [r3, #104]	@ 0x68
 800342c:	e002      	b.n	8003434 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a20      	ldr	r2, [pc, #128]	@ (80034b4 <UART_Start_Receive_IT+0x188>)
 8003432:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d019      	beq.n	8003470 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800345a:	637b      	str	r3, [r7, #52]	@ 0x34
 800345c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003460:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003462:	e841 2300 	strex	r3, r2, [r1]
 8003466:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e6      	bne.n	800343c <UART_Start_Receive_IT+0x110>
 800346e:	e018      	b.n	80034a2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	613b      	str	r3, [r7, #16]
   return(result);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f043 0320 	orr.w	r3, r3, #32
 8003484:	653b      	str	r3, [r7, #80]	@ 0x50
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800348e:	623b      	str	r3, [r7, #32]
 8003490:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	69f9      	ldr	r1, [r7, #28]
 8003494:	6a3a      	ldr	r2, [r7, #32]
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	61bb      	str	r3, [r7, #24]
   return(result);
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e6      	bne.n	8003470 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	375c      	adds	r7, #92	@ 0x5c
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	080037a1 	.word	0x080037a1
 80034b4:	080035f9 	.word	0x080035f9

080034b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b095      	sub	sp, #84	@ 0x54
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034de:	643b      	str	r3, [r7, #64]	@ 0x40
 80034e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034e6:	e841 2300 	strex	r3, r2, [r1]
 80034ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e6      	bne.n	80034c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3308      	adds	r3, #8
 80034f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	61fb      	str	r3, [r7, #28]
   return(result);
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	64bb      	str	r3, [r7, #72]	@ 0x48
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3308      	adds	r3, #8
 8003510:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003512:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003514:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e5      	bne.n	80034f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352a:	2b01      	cmp	r3, #1
 800352c:	d118      	bne.n	8003560 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	e853 3f00 	ldrex	r3, [r3]
 800353a:	60bb      	str	r3, [r7, #8]
   return(result);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f023 0310 	bic.w	r3, r3, #16
 8003542:	647b      	str	r3, [r7, #68]	@ 0x44
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	6979      	ldr	r1, [r7, #20]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	e841 2300 	strex	r3, r2, [r1]
 8003558:	613b      	str	r3, [r7, #16]
   return(result);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e6      	bne.n	800352e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003574:	bf00      	nop
 8003576:	3754      	adds	r7, #84	@ 0x54
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f7ff fa8c 	bl	8002ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	e853 3f00 	ldrex	r3, [r3]
 80035b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ce:	6979      	ldr	r1, [r7, #20]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	e841 2300 	strex	r3, r2, [r1]
 80035d6:	613b      	str	r3, [r7, #16]
   return(result);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1e6      	bne.n	80035ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2220      	movs	r2, #32
 80035e2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff fa58 	bl	8002aa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035f0:	bf00      	nop
 80035f2:	3720      	adds	r7, #32
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b09c      	sub	sp, #112	@ 0x70
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003606:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003610:	2b22      	cmp	r3, #34	@ 0x22
 8003612:	f040 80b9 	bne.w	8003788 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003620:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003624:	b2d9      	uxtb	r1, r3
 8003626:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800362a:	b2da      	uxtb	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003630:	400a      	ands	r2, r1
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	f040 809c 	bne.w	8003798 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800366e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003674:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800367e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003680:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003684:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800368c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e6      	bne.n	8003660 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3308      	adds	r3, #8
 8003698:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369c:	e853 3f00 	ldrex	r3, [r3]
 80036a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a4:	f023 0301 	bic.w	r3, r3, #1
 80036a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3308      	adds	r3, #8
 80036b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80036b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80036b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e5      	bne.n	8003692 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d018      	beq.n	800371a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	623b      	str	r3, [r7, #32]
   return(result);
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003706:	633b      	str	r3, [r7, #48]	@ 0x30
 8003708:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800370c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e6      	bne.n	80036e8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800371e:	2b01      	cmp	r3, #1
 8003720:	d12e      	bne.n	8003780 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	60fb      	str	r3, [r7, #12]
   return(result);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f023 0310 	bic.w	r3, r3, #16
 800373c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	69b9      	ldr	r1, [r7, #24]
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	617b      	str	r3, [r7, #20]
   return(result);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e6      	bne.n	8003728 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b10      	cmp	r3, #16
 8003766:	d103      	bne.n	8003770 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2210      	movs	r2, #16
 800376e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003776:	4619      	mov	r1, r3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff f9a5 	bl	8002ac8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800377e:	e00b      	b.n	8003798 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7fc fef3 	bl	800056c <HAL_UART_RxCpltCallback>
}
 8003786:	e007      	b.n	8003798 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0208 	orr.w	r2, r2, #8
 8003796:	619a      	str	r2, [r3, #24]
}
 8003798:	bf00      	nop
 800379a:	3770      	adds	r7, #112	@ 0x70
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b09c      	sub	sp, #112	@ 0x70
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80037ae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037b8:	2b22      	cmp	r3, #34	@ 0x22
 80037ba:	f040 80b9 	bne.w	8003930 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80037ce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80037d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80037d6:	4013      	ands	r3, r2
 80037d8:	b29a      	uxth	r2, r3
 80037da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e2:	1c9a      	adds	r2, r3, #2
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 809c 	bne.w	8003940 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003810:	e853 3f00 	ldrex	r3, [r3]
 8003814:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003818:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800381c:	667b      	str	r3, [r7, #100]	@ 0x64
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003826:	657b      	str	r3, [r7, #84]	@ 0x54
 8003828:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800382c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e6      	bne.n	8003808 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3308      	adds	r3, #8
 8003840:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800384a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	663b      	str	r3, [r7, #96]	@ 0x60
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3308      	adds	r3, #8
 8003858:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800385a:	643a      	str	r2, [r7, #64]	@ 0x40
 800385c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003860:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e5      	bne.n	800383a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d018      	beq.n	80038c2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	61fb      	str	r3, [r7, #28]
   return(result);
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e6      	bne.n	8003890 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d12e      	bne.n	8003928 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f023 0310 	bic.w	r3, r3, #16
 80038e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	6979      	ldr	r1, [r7, #20]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	e841 2300 	strex	r3, r2, [r1]
 80038fa:	613b      	str	r3, [r7, #16]
   return(result);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e6      	bne.n	80038d0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b10      	cmp	r3, #16
 800390e:	d103      	bne.n	8003918 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2210      	movs	r2, #16
 8003916:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800391e:	4619      	mov	r1, r3
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff f8d1 	bl	8002ac8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003926:	e00b      	b.n	8003940 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7fc fe1f 	bl	800056c <HAL_UART_RxCpltCallback>
}
 800392e:	e007      	b.n	8003940 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0208 	orr.w	r2, r2, #8
 800393e:	619a      	str	r2, [r3, #24]
}
 8003940:	bf00      	nop
 8003942:	3770      	adds	r7, #112	@ 0x70
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f103 0208 	add.w	r2, r3, #8
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f103 0208 	add.w	r2, r3, #8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f103 0208 	add.w	r2, r3, #8
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039a2:	b480      	push	{r7}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	601a      	str	r2, [r3, #0]
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039ea:	b480      	push	{r7}
 80039ec:	b085      	sub	sp, #20
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d103      	bne.n	8003a0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	e00c      	b.n	8003a24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3308      	adds	r3, #8
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	e002      	b.n	8003a18 <vListInsert+0x2e>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d2f6      	bcs.n	8003a12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	601a      	str	r2, [r3, #0]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6892      	ldr	r2, [r2, #8]
 8003a72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6852      	ldr	r2, [r2, #4]
 8003a7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d103      	bne.n	8003a90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	1e5a      	subs	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10d      	bne.n	8003ae0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac8:	b672      	cpsid	i
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	b662      	cpsie	i
 8003ad8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ada:	bf00      	nop
 8003adc:	bf00      	nop
 8003ade:	e7fd      	b.n	8003adc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003ae0:	f001 fabc 	bl	800505c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aec:	68f9      	ldr	r1, [r7, #12]
 8003aee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	441a      	add	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b10:	3b01      	subs	r3, #1
 8003b12:	68f9      	ldr	r1, [r7, #12]
 8003b14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
 8003b1a:	441a      	add	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	22ff      	movs	r2, #255	@ 0xff
 8003b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	22ff      	movs	r2, #255	@ 0xff
 8003b2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d114      	bne.n	8003b60 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01a      	beq.n	8003b74 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3310      	adds	r3, #16
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fe20 	bl	8004788 <xTaskRemoveFromEventList>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d012      	beq.n	8003b74 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b84 <xQueueGenericReset+0xd4>)
 8003b50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	e009      	b.n	8003b74 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3310      	adds	r3, #16
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff feef 	bl	8003948 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3324      	adds	r3, #36	@ 0x24
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff feea 	bl	8003948 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b74:	f001 faa8 	bl	80050c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b78:	2301      	movs	r3, #1
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	e000ed04 	.word	0xe000ed04

08003b88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	@ 0x28
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	4613      	mov	r3, r2
 8003b94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10d      	bne.n	8003bb8 <xQueueGenericCreate+0x30>
	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba0:	b672      	cpsid	i
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	b662      	cpsie	i
 8003bb0:	613b      	str	r3, [r7, #16]
}
 8003bb2:	bf00      	nop
 8003bb4:	bf00      	nop
 8003bb6:	e7fd      	b.n	8003bb4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	e004      	b.n	8003bce <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	fb02 f303 	mul.w	r3, r2, r3
 8003bcc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	3348      	adds	r3, #72	@ 0x48
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f001 fb70 	bl	80052b8 <pvPortMalloc>
 8003bd8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00d      	beq.n	8003bfc <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	3348      	adds	r3, #72	@ 0x48
 8003be8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bea:	79fa      	ldrb	r2, [r7, #7]
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f805 	bl	8003c06 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003bfc:	69bb      	ldr	r3, [r7, #24]
	}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3720      	adds	r7, #32
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b084      	sub	sp, #16
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d103      	bne.n	8003c22 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	e002      	b.n	8003c28 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c34:	2101      	movs	r1, #1
 8003c36:	69b8      	ldr	r0, [r7, #24]
 8003c38:	f7ff ff3a 	bl	8003ab0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08e      	sub	sp, #56	@ 0x38
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10d      	bne.n	8003c74 <xQueueGiveFromISR+0x30>
	__asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5c:	b672      	cpsid	i
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	b662      	cpsie	i
 8003c6c:	623b      	str	r3, [r7, #32]
}
 8003c6e:	bf00      	nop
 8003c70:	bf00      	nop
 8003c72:	e7fd      	b.n	8003c70 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00d      	beq.n	8003c98 <xQueueGiveFromISR+0x54>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c80:	b672      	cpsid	i
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	b662      	cpsie	i
 8003c90:	61fb      	str	r3, [r7, #28]
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d103      	bne.n	8003ca8 <xQueueGiveFromISR+0x64>
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <xQueueGiveFromISR+0x68>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <xQueueGiveFromISR+0x6a>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10d      	bne.n	8003cce <xQueueGiveFromISR+0x8a>
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb6:	b672      	cpsid	i
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	b662      	cpsie	i
 8003cc6:	61bb      	str	r3, [r7, #24]
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	e7fd      	b.n	8003cca <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cce:	f001 faad 	bl	800522c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cd2:	f3ef 8211 	mrs	r2, BASEPRI
 8003cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cda:	b672      	cpsid	i
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	b662      	cpsie	i
 8003cea:	617a      	str	r2, [r7, #20]
 8003cec:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d22b      	bcs.n	8003d5a <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d12:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d112      	bne.n	8003d44 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d016      	beq.n	8003d54 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d28:	3324      	adds	r3, #36	@ 0x24
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fd2c 	bl	8004788 <xTaskRemoveFromEventList>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00e      	beq.n	8003d54 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00b      	beq.n	8003d54 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	e007      	b.n	8003d54 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d48:	3301      	adds	r3, #1
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	b25a      	sxtb	r2, r3
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003d54:	2301      	movs	r3, #1
 8003d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d58:	e001      	b.n	8003d5e <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d60:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3738      	adds	r7, #56	@ 0x38
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08e      	sub	sp, #56	@ 0x38
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10d      	bne.n	8003dac <xQueueSemaphoreTake+0x38>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d94:	b672      	cpsid	i
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	b662      	cpsie	i
 8003da4:	623b      	str	r3, [r7, #32]
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	e7fd      	b.n	8003da8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00d      	beq.n	8003dd0 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db8:	b672      	cpsid	i
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	b662      	cpsie	i
 8003dc8:	61fb      	str	r3, [r7, #28]
}
 8003dca:	bf00      	nop
 8003dcc:	bf00      	nop
 8003dce:	e7fd      	b.n	8003dcc <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dd0:	f000 fe80 	bl	8004ad4 <xTaskGetSchedulerState>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <xQueueSemaphoreTake+0x6c>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <xQueueSemaphoreTake+0x70>
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <xQueueSemaphoreTake+0x72>
 8003de4:	2300      	movs	r3, #0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10d      	bne.n	8003e06 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dee:	b672      	cpsid	i
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	b662      	cpsie	i
 8003dfe:	61bb      	str	r3, [r7, #24]
}
 8003e00:	bf00      	nop
 8003e02:	bf00      	nop
 8003e04:	e7fd      	b.n	8003e02 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e06:	f001 f929 	bl	800505c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d024      	beq.n	8003e60 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e18:	1e5a      	subs	r2, r3, #1
 8003e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d104      	bne.n	8003e30 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e26:	f000 ff93 	bl	8004d50 <pvTaskIncrementMutexHeldCount>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00f      	beq.n	8003e58 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e3a:	3310      	adds	r3, #16
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fca3 	bl	8004788 <xTaskRemoveFromEventList>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e48:	4b55      	ldr	r3, [pc, #340]	@ (8003fa0 <xQueueSemaphoreTake+0x22c>)
 8003e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e58:	f001 f936 	bl	80050c8 <vPortExitCritical>
				return pdPASS;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e09a      	b.n	8003f96 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d114      	bne.n	8003e90 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00d      	beq.n	8003e88 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8003e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e70:	b672      	cpsid	i
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	b662      	cpsie	i
 8003e80:	617b      	str	r3, [r7, #20]
}
 8003e82:	bf00      	nop
 8003e84:	bf00      	nop
 8003e86:	e7fd      	b.n	8003e84 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e88:	f001 f91e 	bl	80050c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e082      	b.n	8003f96 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fcda 	bl	8004854 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ea4:	f001 f910 	bl	80050c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ea8:	f000 fa7e 	bl	80043a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eac:	f001 f8d6 	bl	800505c <vPortEnterCritical>
 8003eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003eb6:	b25b      	sxtb	r3, r3
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebc:	d103      	bne.n	8003ec6 <xQueueSemaphoreTake+0x152>
 8003ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ecc:	b25b      	sxtb	r3, r3
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d103      	bne.n	8003edc <xQueueSemaphoreTake+0x168>
 8003ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003edc:	f001 f8f4 	bl	80050c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ee0:	463a      	mov	r2, r7
 8003ee2:	f107 030c 	add.w	r3, r7, #12
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fcc9 	bl	8004880 <xTaskCheckForTimeOut>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d132      	bne.n	8003f5a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ef4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ef6:	f000 f8bf 	bl	8004078 <prvIsQueueEmpty>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d026      	beq.n	8003f4e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d109      	bne.n	8003f1c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8003f08:	f001 f8a8 	bl	800505c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fdfd 	bl	8004b10 <xTaskPriorityInherit>
 8003f16:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003f18:	f001 f8d6 	bl	80050c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1e:	3324      	adds	r3, #36	@ 0x24
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fc07 	bl	8004738 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f2c:	f000 f852 	bl	8003fd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f30:	f000 fa48 	bl	80043c4 <xTaskResumeAll>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f47f af65 	bne.w	8003e06 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8003f3c:	4b18      	ldr	r3, [pc, #96]	@ (8003fa0 <xQueueSemaphoreTake+0x22c>)
 8003f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	e75b      	b.n	8003e06 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f50:	f000 f840 	bl	8003fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f54:	f000 fa36 	bl	80043c4 <xTaskResumeAll>
 8003f58:	e755      	b.n	8003e06 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003f5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f5c:	f000 f83a 	bl	8003fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f60:	f000 fa30 	bl	80043c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f66:	f000 f887 	bl	8004078 <prvIsQueueEmpty>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f43f af4a 	beq.w	8003e06 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00d      	beq.n	8003f94 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8003f78:	f001 f870 	bl	800505c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f7e:	f000 f811 	bl	8003fa4 <prvGetDisinheritPriorityAfterTimeout>
 8003f82:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fe40 	bl	8004c10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f90:	f001 f89a 	bl	80050c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3738      	adds	r7, #56	@ 0x38
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d006      	beq.n	8003fc2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f1c3 0307 	rsb	r3, r3, #7
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e001      	b.n	8003fc6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
	}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fdc:	f001 f83e 	bl	800505c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fe6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fe8:	e011      	b.n	800400e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d012      	beq.n	8004018 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3324      	adds	r3, #36	@ 0x24
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fbc6 	bl	8004788 <xTaskRemoveFromEventList>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004002:	f000 fca5 	bl	8004950 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	3b01      	subs	r3, #1
 800400a:	b2db      	uxtb	r3, r3
 800400c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800400e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004012:	2b00      	cmp	r3, #0
 8004014:	dce9      	bgt.n	8003fea <prvUnlockQueue+0x16>
 8004016:	e000      	b.n	800401a <prvUnlockQueue+0x46>
					break;
 8004018:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	22ff      	movs	r2, #255	@ 0xff
 800401e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004022:	f001 f851 	bl	80050c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004026:	f001 f819 	bl	800505c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004030:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004032:	e011      	b.n	8004058 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d012      	beq.n	8004062 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3310      	adds	r3, #16
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fba1 	bl	8004788 <xTaskRemoveFromEventList>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800404c:	f000 fc80 	bl	8004950 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004050:	7bbb      	ldrb	r3, [r7, #14]
 8004052:	3b01      	subs	r3, #1
 8004054:	b2db      	uxtb	r3, r3
 8004056:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800405c:	2b00      	cmp	r3, #0
 800405e:	dce9      	bgt.n	8004034 <prvUnlockQueue+0x60>
 8004060:	e000      	b.n	8004064 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004062:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	22ff      	movs	r2, #255	@ 0xff
 8004068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800406c:	f001 f82c 	bl	80050c8 <vPortExitCritical>
}
 8004070:	bf00      	nop
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004080:	f000 ffec 	bl	800505c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800408c:	2301      	movs	r3, #1
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	e001      	b.n	8004096 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004096:	f001 f817 	bl	80050c8 <vPortExitCritical>

	return xReturn;
 800409a:	68fb      	ldr	r3, [r7, #12]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08c      	sub	sp, #48	@ 0x30
 80040a8:	af04      	add	r7, sp, #16
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	4613      	mov	r3, r2
 80040b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80040b4:	88fb      	ldrh	r3, [r7, #6]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 f8fd 	bl	80052b8 <pvPortMalloc>
 80040be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00e      	beq.n	80040e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80040c6:	2054      	movs	r0, #84	@ 0x54
 80040c8:	f001 f8f6 	bl	80052b8 <pvPortMalloc>
 80040cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80040da:	e005      	b.n	80040e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80040dc:	6978      	ldr	r0, [r7, #20]
 80040de:	f001 f9b9 	bl	8005454 <vPortFree>
 80040e2:	e001      	b.n	80040e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d013      	beq.n	8004116 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040ee:	88fa      	ldrh	r2, [r7, #6]
 80040f0:	2300      	movs	r3, #0
 80040f2:	9303      	str	r3, [sp, #12]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	9302      	str	r3, [sp, #8]
 80040f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f80e 	bl	8004126 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800410a:	69f8      	ldr	r0, [r7, #28]
 800410c:	f000 f896 	bl	800423c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004110:	2301      	movs	r3, #1
 8004112:	61bb      	str	r3, [r7, #24]
 8004114:	e002      	b.n	800411c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800411c:	69bb      	ldr	r3, [r7, #24]
	}
 800411e:	4618      	mov	r0, r3
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b088      	sub	sp, #32
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
 8004132:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800413e:	440b      	add	r3, r1
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	f023 0307 	bic.w	r3, r3, #7
 800414c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00d      	beq.n	8004174 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415c:	b672      	cpsid	i
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	b662      	cpsie	i
 800416c:	617b      	str	r3, [r7, #20]
}
 800416e:	bf00      	nop
 8004170:	bf00      	nop
 8004172:	e7fd      	b.n	8004170 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01f      	beq.n	80041ba <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	e012      	b.n	80041a6 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	4413      	add	r3, r2
 8004186:	7819      	ldrb	r1, [r3, #0]
 8004188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4413      	add	r3, r2
 800418e:	3334      	adds	r3, #52	@ 0x34
 8004190:	460a      	mov	r2, r1
 8004192:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	4413      	add	r3, r2
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d006      	beq.n	80041ae <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	3301      	adds	r3, #1
 80041a4:	61fb      	str	r3, [r7, #28]
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	2b0f      	cmp	r3, #15
 80041aa:	d9e9      	bls.n	8004180 <prvInitialiseNewTask+0x5a>
 80041ac:	e000      	b.n	80041b0 <prvInitialiseNewTask+0x8a>
			{
				break;
 80041ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041b8:	e003      	b.n	80041c2 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80041ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c4:	2b06      	cmp	r3, #6
 80041c6:	d901      	bls.n	80041cc <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041c8:	2306      	movs	r3, #6
 80041ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041d6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	2200      	movs	r2, #0
 80041dc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e0:	3304      	adds	r3, #4
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff fbd0 	bl	8003988 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ea:	3318      	adds	r3, #24
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fbcb 	bl	8003988 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fa:	f1c3 0207 	rsb	r2, r3, #7
 80041fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004200:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004206:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420a:	2200      	movs	r2, #0
 800420c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800420e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	68f9      	ldr	r1, [r7, #12]
 800421a:	69b8      	ldr	r0, [r7, #24]
 800421c:	f000 fe12 	bl	8004e44 <pxPortInitialiseStack>
 8004220:	4602      	mov	r2, r0
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800422c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004232:	bf00      	nop
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004244:	f000 ff0a 	bl	800505c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004248:	4b2a      	ldr	r3, [pc, #168]	@ (80042f4 <prvAddNewTaskToReadyList+0xb8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	4a29      	ldr	r2, [pc, #164]	@ (80042f4 <prvAddNewTaskToReadyList+0xb8>)
 8004250:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004252:	4b29      	ldr	r3, [pc, #164]	@ (80042f8 <prvAddNewTaskToReadyList+0xbc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d109      	bne.n	800426e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800425a:	4a27      	ldr	r2, [pc, #156]	@ (80042f8 <prvAddNewTaskToReadyList+0xbc>)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004260:	4b24      	ldr	r3, [pc, #144]	@ (80042f4 <prvAddNewTaskToReadyList+0xb8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d110      	bne.n	800428a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004268:	f000 fb96 	bl	8004998 <prvInitialiseTaskLists>
 800426c:	e00d      	b.n	800428a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800426e:	4b23      	ldr	r3, [pc, #140]	@ (80042fc <prvAddNewTaskToReadyList+0xc0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004276:	4b20      	ldr	r3, [pc, #128]	@ (80042f8 <prvAddNewTaskToReadyList+0xbc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004280:	429a      	cmp	r2, r3
 8004282:	d802      	bhi.n	800428a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004284:	4a1c      	ldr	r2, [pc, #112]	@ (80042f8 <prvAddNewTaskToReadyList+0xbc>)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800428a:	4b1d      	ldr	r3, [pc, #116]	@ (8004300 <prvAddNewTaskToReadyList+0xc4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3301      	adds	r3, #1
 8004290:	4a1b      	ldr	r2, [pc, #108]	@ (8004300 <prvAddNewTaskToReadyList+0xc4>)
 8004292:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	2201      	movs	r2, #1
 800429a:	409a      	lsls	r2, r3
 800429c:	4b19      	ldr	r3, [pc, #100]	@ (8004304 <prvAddNewTaskToReadyList+0xc8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	4a18      	ldr	r2, [pc, #96]	@ (8004304 <prvAddNewTaskToReadyList+0xc8>)
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4a15      	ldr	r2, [pc, #84]	@ (8004308 <prvAddNewTaskToReadyList+0xcc>)
 80042b4:	441a      	add	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3304      	adds	r3, #4
 80042ba:	4619      	mov	r1, r3
 80042bc:	4610      	mov	r0, r2
 80042be:	f7ff fb70 	bl	80039a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042c2:	f000 ff01 	bl	80050c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042c6:	4b0d      	ldr	r3, [pc, #52]	@ (80042fc <prvAddNewTaskToReadyList+0xc0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00e      	beq.n	80042ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042ce:	4b0a      	ldr	r3, [pc, #40]	@ (80042f8 <prvAddNewTaskToReadyList+0xbc>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	429a      	cmp	r2, r3
 80042da:	d207      	bcs.n	80042ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042dc:	4b0b      	ldr	r3, [pc, #44]	@ (800430c <prvAddNewTaskToReadyList+0xd0>)
 80042de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ec:	bf00      	nop
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	200001c8 	.word	0x200001c8
 80042f8:	200000c8 	.word	0x200000c8
 80042fc:	200001d4 	.word	0x200001d4
 8004300:	200001e4 	.word	0x200001e4
 8004304:	200001d0 	.word	0x200001d0
 8004308:	200000cc 	.word	0x200000cc
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004316:	4b1e      	ldr	r3, [pc, #120]	@ (8004390 <vTaskStartScheduler+0x80>)
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	2300      	movs	r3, #0
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	2300      	movs	r3, #0
 8004320:	2280      	movs	r2, #128	@ 0x80
 8004322:	491c      	ldr	r1, [pc, #112]	@ (8004394 <vTaskStartScheduler+0x84>)
 8004324:	481c      	ldr	r0, [pc, #112]	@ (8004398 <vTaskStartScheduler+0x88>)
 8004326:	f7ff febd 	bl	80040a4 <xTaskCreate>
 800432a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d118      	bne.n	8004364 <vTaskStartScheduler+0x54>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004336:	b672      	cpsid	i
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	b662      	cpsie	i
 8004346:	60bb      	str	r3, [r7, #8]
}
 8004348:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800434a:	4b14      	ldr	r3, [pc, #80]	@ (800439c <vTaskStartScheduler+0x8c>)
 800434c:	f04f 32ff 	mov.w	r2, #4294967295
 8004350:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004352:	4b13      	ldr	r3, [pc, #76]	@ (80043a0 <vTaskStartScheduler+0x90>)
 8004354:	2201      	movs	r2, #1
 8004356:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004358:	4b12      	ldr	r3, [pc, #72]	@ (80043a4 <vTaskStartScheduler+0x94>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800435e:	f000 fdff 	bl	8004f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004362:	e011      	b.n	8004388 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436a:	d10d      	bne.n	8004388 <vTaskStartScheduler+0x78>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004370:	b672      	cpsid	i
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	b662      	cpsie	i
 8004380:	607b      	str	r3, [r7, #4]
}
 8004382:	bf00      	nop
 8004384:	bf00      	nop
 8004386:	e7fd      	b.n	8004384 <vTaskStartScheduler+0x74>
}
 8004388:	bf00      	nop
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	200001ec 	.word	0x200001ec
 8004394:	08005730 	.word	0x08005730
 8004398:	08004969 	.word	0x08004969
 800439c:	200001e8 	.word	0x200001e8
 80043a0:	200001d4 	.word	0x200001d4
 80043a4:	200001cc 	.word	0x200001cc

080043a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043ac:	4b04      	ldr	r3, [pc, #16]	@ (80043c0 <vTaskSuspendAll+0x18>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	4a03      	ldr	r2, [pc, #12]	@ (80043c0 <vTaskSuspendAll+0x18>)
 80043b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	200001f0 	.word	0x200001f0

080043c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043d2:	4b43      	ldr	r3, [pc, #268]	@ (80044e0 <xTaskResumeAll+0x11c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10d      	bne.n	80043f6 <xTaskResumeAll+0x32>
	__asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043de:	b672      	cpsid	i
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	b662      	cpsie	i
 80043ee:	603b      	str	r3, [r7, #0]
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	e7fd      	b.n	80043f2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043f6:	f000 fe31 	bl	800505c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043fa:	4b39      	ldr	r3, [pc, #228]	@ (80044e0 <xTaskResumeAll+0x11c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3b01      	subs	r3, #1
 8004400:	4a37      	ldr	r2, [pc, #220]	@ (80044e0 <xTaskResumeAll+0x11c>)
 8004402:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004404:	4b36      	ldr	r3, [pc, #216]	@ (80044e0 <xTaskResumeAll+0x11c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d161      	bne.n	80044d0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800440c:	4b35      	ldr	r3, [pc, #212]	@ (80044e4 <xTaskResumeAll+0x120>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d05d      	beq.n	80044d0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004414:	e02e      	b.n	8004474 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004416:	4b34      	ldr	r3, [pc, #208]	@ (80044e8 <xTaskResumeAll+0x124>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3318      	adds	r3, #24
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff fb1a 	bl	8003a5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3304      	adds	r3, #4
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fb15 	bl	8003a5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004436:	2201      	movs	r2, #1
 8004438:	409a      	lsls	r2, r3
 800443a:	4b2c      	ldr	r3, [pc, #176]	@ (80044ec <xTaskResumeAll+0x128>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4313      	orrs	r3, r2
 8004440:	4a2a      	ldr	r2, [pc, #168]	@ (80044ec <xTaskResumeAll+0x128>)
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4a27      	ldr	r2, [pc, #156]	@ (80044f0 <xTaskResumeAll+0x12c>)
 8004452:	441a      	add	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f7ff faa1 	bl	80039a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004464:	4b23      	ldr	r3, [pc, #140]	@ (80044f4 <xTaskResumeAll+0x130>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446a:	429a      	cmp	r2, r3
 800446c:	d302      	bcc.n	8004474 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800446e:	4b22      	ldr	r3, [pc, #136]	@ (80044f8 <xTaskResumeAll+0x134>)
 8004470:	2201      	movs	r2, #1
 8004472:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004474:	4b1c      	ldr	r3, [pc, #112]	@ (80044e8 <xTaskResumeAll+0x124>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1cc      	bne.n	8004416 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004482:	f000 fb07 	bl	8004a94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004486:	4b1d      	ldr	r3, [pc, #116]	@ (80044fc <xTaskResumeAll+0x138>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d010      	beq.n	80044b4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004492:	f000 f837 	bl	8004504 <xTaskIncrementTick>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800449c:	4b16      	ldr	r3, [pc, #88]	@ (80044f8 <xTaskResumeAll+0x134>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f1      	bne.n	8004492 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80044ae:	4b13      	ldr	r3, [pc, #76]	@ (80044fc <xTaskResumeAll+0x138>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044b4:	4b10      	ldr	r3, [pc, #64]	@ (80044f8 <xTaskResumeAll+0x134>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044bc:	2301      	movs	r3, #1
 80044be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004500 <xTaskResumeAll+0x13c>)
 80044c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044d0:	f000 fdfa 	bl	80050c8 <vPortExitCritical>

	return xAlreadyYielded;
 80044d4:	68bb      	ldr	r3, [r7, #8]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	200001f0 	.word	0x200001f0
 80044e4:	200001c8 	.word	0x200001c8
 80044e8:	20000188 	.word	0x20000188
 80044ec:	200001d0 	.word	0x200001d0
 80044f0:	200000cc 	.word	0x200000cc
 80044f4:	200000c8 	.word	0x200000c8
 80044f8:	200001dc 	.word	0x200001dc
 80044fc:	200001d8 	.word	0x200001d8
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800450e:	4b50      	ldr	r3, [pc, #320]	@ (8004650 <xTaskIncrementTick+0x14c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f040 808b 	bne.w	800462e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004518:	4b4e      	ldr	r3, [pc, #312]	@ (8004654 <xTaskIncrementTick+0x150>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004520:	4a4c      	ldr	r2, [pc, #304]	@ (8004654 <xTaskIncrementTick+0x150>)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d123      	bne.n	8004574 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800452c:	4b4a      	ldr	r3, [pc, #296]	@ (8004658 <xTaskIncrementTick+0x154>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00d      	beq.n	8004552 <xTaskIncrementTick+0x4e>
	__asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453a:	b672      	cpsid	i
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	b662      	cpsie	i
 800454a:	603b      	str	r3, [r7, #0]
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	e7fd      	b.n	800454e <xTaskIncrementTick+0x4a>
 8004552:	4b41      	ldr	r3, [pc, #260]	@ (8004658 <xTaskIncrementTick+0x154>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	4b40      	ldr	r3, [pc, #256]	@ (800465c <xTaskIncrementTick+0x158>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a3e      	ldr	r2, [pc, #248]	@ (8004658 <xTaskIncrementTick+0x154>)
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	4a3e      	ldr	r2, [pc, #248]	@ (800465c <xTaskIncrementTick+0x158>)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4b3e      	ldr	r3, [pc, #248]	@ (8004660 <xTaskIncrementTick+0x15c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3301      	adds	r3, #1
 800456c:	4a3c      	ldr	r2, [pc, #240]	@ (8004660 <xTaskIncrementTick+0x15c>)
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	f000 fa90 	bl	8004a94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004574:	4b3b      	ldr	r3, [pc, #236]	@ (8004664 <xTaskIncrementTick+0x160>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	429a      	cmp	r2, r3
 800457c:	d348      	bcc.n	8004610 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800457e:	4b36      	ldr	r3, [pc, #216]	@ (8004658 <xTaskIncrementTick+0x154>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004588:	4b36      	ldr	r3, [pc, #216]	@ (8004664 <xTaskIncrementTick+0x160>)
 800458a:	f04f 32ff 	mov.w	r2, #4294967295
 800458e:	601a      	str	r2, [r3, #0]
					break;
 8004590:	e03e      	b.n	8004610 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004592:	4b31      	ldr	r3, [pc, #196]	@ (8004658 <xTaskIncrementTick+0x154>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d203      	bcs.n	80045b2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004664 <xTaskIncrementTick+0x160>)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045b0:	e02e      	b.n	8004610 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	3304      	adds	r3, #4
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fa50 	bl	8003a5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d004      	beq.n	80045ce <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	3318      	adds	r3, #24
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fa47 	bl	8003a5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d2:	2201      	movs	r2, #1
 80045d4:	409a      	lsls	r2, r3
 80045d6:	4b24      	ldr	r3, [pc, #144]	@ (8004668 <xTaskIncrementTick+0x164>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4313      	orrs	r3, r2
 80045dc:	4a22      	ldr	r2, [pc, #136]	@ (8004668 <xTaskIncrementTick+0x164>)
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4a1f      	ldr	r2, [pc, #124]	@ (800466c <xTaskIncrementTick+0x168>)
 80045ee:	441a      	add	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f7ff f9d3 	bl	80039a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004600:	4b1b      	ldr	r3, [pc, #108]	@ (8004670 <xTaskIncrementTick+0x16c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004606:	429a      	cmp	r2, r3
 8004608:	d3b9      	bcc.n	800457e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800460a:	2301      	movs	r3, #1
 800460c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800460e:	e7b6      	b.n	800457e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004610:	4b17      	ldr	r3, [pc, #92]	@ (8004670 <xTaskIncrementTick+0x16c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004616:	4915      	ldr	r1, [pc, #84]	@ (800466c <xTaskIncrementTick+0x168>)
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d907      	bls.n	8004638 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004628:	2301      	movs	r3, #1
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	e004      	b.n	8004638 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800462e:	4b11      	ldr	r3, [pc, #68]	@ (8004674 <xTaskIncrementTick+0x170>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	4a0f      	ldr	r2, [pc, #60]	@ (8004674 <xTaskIncrementTick+0x170>)
 8004636:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004638:	4b0f      	ldr	r3, [pc, #60]	@ (8004678 <xTaskIncrementTick+0x174>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004640:	2301      	movs	r3, #1
 8004642:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004644:	697b      	ldr	r3, [r7, #20]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	200001f0 	.word	0x200001f0
 8004654:	200001cc 	.word	0x200001cc
 8004658:	20000180 	.word	0x20000180
 800465c:	20000184 	.word	0x20000184
 8004660:	200001e0 	.word	0x200001e0
 8004664:	200001e8 	.word	0x200001e8
 8004668:	200001d0 	.word	0x200001d0
 800466c:	200000cc 	.word	0x200000cc
 8004670:	200000c8 	.word	0x200000c8
 8004674:	200001d8 	.word	0x200001d8
 8004678:	200001dc 	.word	0x200001dc

0800467c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004682:	4b28      	ldr	r3, [pc, #160]	@ (8004724 <vTaskSwitchContext+0xa8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800468a:	4b27      	ldr	r3, [pc, #156]	@ (8004728 <vTaskSwitchContext+0xac>)
 800468c:	2201      	movs	r2, #1
 800468e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004690:	e042      	b.n	8004718 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004692:	4b25      	ldr	r3, [pc, #148]	@ (8004728 <vTaskSwitchContext+0xac>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004698:	4b24      	ldr	r3, [pc, #144]	@ (800472c <vTaskSwitchContext+0xb0>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	fab3 f383 	clz	r3, r3
 80046a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80046a6:	7afb      	ldrb	r3, [r7, #11]
 80046a8:	f1c3 031f 	rsb	r3, r3, #31
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	4920      	ldr	r1, [pc, #128]	@ (8004730 <vTaskSwitchContext+0xb4>)
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10d      	bne.n	80046de <vTaskSwitchContext+0x62>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c6:	b672      	cpsid	i
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	b662      	cpsie	i
 80046d6:	607b      	str	r3, [r7, #4]
}
 80046d8:	bf00      	nop
 80046da:	bf00      	nop
 80046dc:	e7fd      	b.n	80046da <vTaskSwitchContext+0x5e>
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4a11      	ldr	r2, [pc, #68]	@ (8004730 <vTaskSwitchContext+0xb4>)
 80046ea:	4413      	add	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	3308      	adds	r3, #8
 8004700:	429a      	cmp	r2, r3
 8004702:	d104      	bne.n	800470e <vTaskSwitchContext+0x92>
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	605a      	str	r2, [r3, #4]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a07      	ldr	r2, [pc, #28]	@ (8004734 <vTaskSwitchContext+0xb8>)
 8004716:	6013      	str	r3, [r2, #0]
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	200001f0 	.word	0x200001f0
 8004728:	200001dc 	.word	0x200001dc
 800472c:	200001d0 	.word	0x200001d0
 8004730:	200000cc 	.word	0x200000cc
 8004734:	200000c8 	.word	0x200000c8

08004738 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10d      	bne.n	8004764 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474c:	b672      	cpsid	i
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	b662      	cpsie	i
 800475c:	60fb      	str	r3, [r7, #12]
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	e7fd      	b.n	8004760 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004764:	4b07      	ldr	r3, [pc, #28]	@ (8004784 <vTaskPlaceOnEventList+0x4c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3318      	adds	r3, #24
 800476a:	4619      	mov	r1, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff f93c 	bl	80039ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004772:	2101      	movs	r1, #1
 8004774:	6838      	ldr	r0, [r7, #0]
 8004776:	f000 faff 	bl	8004d78 <prvAddCurrentTaskToDelayedList>
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	200000c8 	.word	0x200000c8

08004788 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10d      	bne.n	80047ba <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a2:	b672      	cpsid	i
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	b662      	cpsie	i
 80047b2:	60fb      	str	r3, [r7, #12]
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop
 80047b8:	e7fd      	b.n	80047b6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	3318      	adds	r3, #24
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff f94c 	bl	8003a5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047c4:	4b1d      	ldr	r3, [pc, #116]	@ (800483c <xTaskRemoveFromEventList+0xb4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d11c      	bne.n	8004806 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff f943 	bl	8003a5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	2201      	movs	r2, #1
 80047dc:	409a      	lsls	r2, r3
 80047de:	4b18      	ldr	r3, [pc, #96]	@ (8004840 <xTaskRemoveFromEventList+0xb8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	4a16      	ldr	r2, [pc, #88]	@ (8004840 <xTaskRemoveFromEventList+0xb8>)
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4a13      	ldr	r2, [pc, #76]	@ (8004844 <xTaskRemoveFromEventList+0xbc>)
 80047f6:	441a      	add	r2, r3
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	3304      	adds	r3, #4
 80047fc:	4619      	mov	r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	f7ff f8cf 	bl	80039a2 <vListInsertEnd>
 8004804:	e005      	b.n	8004812 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	3318      	adds	r3, #24
 800480a:	4619      	mov	r1, r3
 800480c:	480e      	ldr	r0, [pc, #56]	@ (8004848 <xTaskRemoveFromEventList+0xc0>)
 800480e:	f7ff f8c8 	bl	80039a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004816:	4b0d      	ldr	r3, [pc, #52]	@ (800484c <xTaskRemoveFromEventList+0xc4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481c:	429a      	cmp	r2, r3
 800481e:	d905      	bls.n	800482c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004820:	2301      	movs	r3, #1
 8004822:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004824:	4b0a      	ldr	r3, [pc, #40]	@ (8004850 <xTaskRemoveFromEventList+0xc8>)
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e001      	b.n	8004830 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004830:	697b      	ldr	r3, [r7, #20]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	200001f0 	.word	0x200001f0
 8004840:	200001d0 	.word	0x200001d0
 8004844:	200000cc 	.word	0x200000cc
 8004848:	20000188 	.word	0x20000188
 800484c:	200000c8 	.word	0x200000c8
 8004850:	200001dc 	.word	0x200001dc

08004854 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800485c:	4b06      	ldr	r3, [pc, #24]	@ (8004878 <vTaskInternalSetTimeOutState+0x24>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004864:	4b05      	ldr	r3, [pc, #20]	@ (800487c <vTaskInternalSetTimeOutState+0x28>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	605a      	str	r2, [r3, #4]
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	200001e0 	.word	0x200001e0
 800487c:	200001cc 	.word	0x200001cc

08004880 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10d      	bne.n	80048ac <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004894:	b672      	cpsid	i
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	b662      	cpsie	i
 80048a4:	613b      	str	r3, [r7, #16]
}
 80048a6:	bf00      	nop
 80048a8:	bf00      	nop
 80048aa:	e7fd      	b.n	80048a8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10d      	bne.n	80048ce <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b6:	b672      	cpsid	i
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	b662      	cpsie	i
 80048c6:	60fb      	str	r3, [r7, #12]
}
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop
 80048cc:	e7fd      	b.n	80048ca <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80048ce:	f000 fbc5 	bl	800505c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004948 <xTaskCheckForTimeOut+0xc8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	d102      	bne.n	80048f2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]
 80048f0:	e023      	b.n	800493a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b15      	ldr	r3, [pc, #84]	@ (800494c <xTaskCheckForTimeOut+0xcc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d007      	beq.n	800490e <xTaskCheckForTimeOut+0x8e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	429a      	cmp	r2, r3
 8004906:	d302      	bcc.n	800490e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004908:	2301      	movs	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]
 800490c:	e015      	b.n	800493a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	429a      	cmp	r2, r3
 8004916:	d20b      	bcs.n	8004930 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	1ad2      	subs	r2, r2, r3
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff ff95 	bl	8004854 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	e004      	b.n	800493a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004936:	2301      	movs	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800493a:	f000 fbc5 	bl	80050c8 <vPortExitCritical>

	return xReturn;
 800493e:	69fb      	ldr	r3, [r7, #28]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	200001cc 	.word	0x200001cc
 800494c:	200001e0 	.word	0x200001e0

08004950 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004954:	4b03      	ldr	r3, [pc, #12]	@ (8004964 <vTaskMissedYield+0x14>)
 8004956:	2201      	movs	r2, #1
 8004958:	601a      	str	r2, [r3, #0]
}
 800495a:	bf00      	nop
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	200001dc 	.word	0x200001dc

08004968 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004970:	f000 f852 	bl	8004a18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004974:	4b06      	ldr	r3, [pc, #24]	@ (8004990 <prvIdleTask+0x28>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d9f9      	bls.n	8004970 <prvIdleTask+0x8>
			{
				taskYIELD();
 800497c:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <prvIdleTask+0x2c>)
 800497e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800498c:	e7f0      	b.n	8004970 <prvIdleTask+0x8>
 800498e:	bf00      	nop
 8004990:	200000cc 	.word	0x200000cc
 8004994:	e000ed04 	.word	0xe000ed04

08004998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800499e:	2300      	movs	r3, #0
 80049a0:	607b      	str	r3, [r7, #4]
 80049a2:	e00c      	b.n	80049be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4a12      	ldr	r2, [pc, #72]	@ (80049f8 <prvInitialiseTaskLists+0x60>)
 80049b0:	4413      	add	r3, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe ffc8 	bl	8003948 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3301      	adds	r3, #1
 80049bc:	607b      	str	r3, [r7, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b06      	cmp	r3, #6
 80049c2:	d9ef      	bls.n	80049a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049c4:	480d      	ldr	r0, [pc, #52]	@ (80049fc <prvInitialiseTaskLists+0x64>)
 80049c6:	f7fe ffbf 	bl	8003948 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049ca:	480d      	ldr	r0, [pc, #52]	@ (8004a00 <prvInitialiseTaskLists+0x68>)
 80049cc:	f7fe ffbc 	bl	8003948 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049d0:	480c      	ldr	r0, [pc, #48]	@ (8004a04 <prvInitialiseTaskLists+0x6c>)
 80049d2:	f7fe ffb9 	bl	8003948 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049d6:	480c      	ldr	r0, [pc, #48]	@ (8004a08 <prvInitialiseTaskLists+0x70>)
 80049d8:	f7fe ffb6 	bl	8003948 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049dc:	480b      	ldr	r0, [pc, #44]	@ (8004a0c <prvInitialiseTaskLists+0x74>)
 80049de:	f7fe ffb3 	bl	8003948 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <prvInitialiseTaskLists+0x78>)
 80049e4:	4a05      	ldr	r2, [pc, #20]	@ (80049fc <prvInitialiseTaskLists+0x64>)
 80049e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a14 <prvInitialiseTaskLists+0x7c>)
 80049ea:	4a05      	ldr	r2, [pc, #20]	@ (8004a00 <prvInitialiseTaskLists+0x68>)
 80049ec:	601a      	str	r2, [r3, #0]
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	200000cc 	.word	0x200000cc
 80049fc:	20000158 	.word	0x20000158
 8004a00:	2000016c 	.word	0x2000016c
 8004a04:	20000188 	.word	0x20000188
 8004a08:	2000019c 	.word	0x2000019c
 8004a0c:	200001b4 	.word	0x200001b4
 8004a10:	20000180 	.word	0x20000180
 8004a14:	20000184 	.word	0x20000184

08004a18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a1e:	e019      	b.n	8004a54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a20:	f000 fb1c 	bl	800505c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a24:	4b10      	ldr	r3, [pc, #64]	@ (8004a68 <prvCheckTasksWaitingTermination+0x50>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff f813 	bl	8003a5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a36:	4b0d      	ldr	r3, [pc, #52]	@ (8004a6c <prvCheckTasksWaitingTermination+0x54>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8004a6c <prvCheckTasksWaitingTermination+0x54>)
 8004a3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a40:	4b0b      	ldr	r3, [pc, #44]	@ (8004a70 <prvCheckTasksWaitingTermination+0x58>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	4a0a      	ldr	r2, [pc, #40]	@ (8004a70 <prvCheckTasksWaitingTermination+0x58>)
 8004a48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a4a:	f000 fb3d 	bl	80050c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f810 	bl	8004a74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a54:	4b06      	ldr	r3, [pc, #24]	@ (8004a70 <prvCheckTasksWaitingTermination+0x58>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e1      	bne.n	8004a20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	2000019c 	.word	0x2000019c
 8004a6c:	200001c8 	.word	0x200001c8
 8004a70:	200001b0 	.word	0x200001b0

08004a74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fce7 	bl	8005454 <vPortFree>
			vPortFree( pxTCB );
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fce4 	bl	8005454 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a8c:	bf00      	nop
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004acc <prvResetNextTaskUnblockTime+0x38>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d104      	bne.n	8004aae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad0 <prvResetNextTaskUnblockTime+0x3c>)
 8004aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004aac:	e008      	b.n	8004ac0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aae:	4b07      	ldr	r3, [pc, #28]	@ (8004acc <prvResetNextTaskUnblockTime+0x38>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	4a04      	ldr	r2, [pc, #16]	@ (8004ad0 <prvResetNextTaskUnblockTime+0x3c>)
 8004abe:	6013      	str	r3, [r2, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	20000180 	.word	0x20000180
 8004ad0:	200001e8 	.word	0x200001e8

08004ad4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ada:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <xTaskGetSchedulerState+0x34>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d102      	bne.n	8004ae8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	e008      	b.n	8004afa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae8:	4b08      	ldr	r3, [pc, #32]	@ (8004b0c <xTaskGetSchedulerState+0x38>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d102      	bne.n	8004af6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004af0:	2302      	movs	r3, #2
 8004af2:	607b      	str	r3, [r7, #4]
 8004af4:	e001      	b.n	8004afa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004af6:	2300      	movs	r3, #0
 8004af8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004afa:	687b      	ldr	r3, [r7, #4]
	}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	200001d4 	.word	0x200001d4
 8004b0c:	200001f0 	.word	0x200001f0

08004b10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d069      	beq.n	8004bfa <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b2a:	4b36      	ldr	r3, [pc, #216]	@ (8004c04 <xTaskPriorityInherit+0xf4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d259      	bcs.n	8004be8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	db06      	blt.n	8004b4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b3c:	4b31      	ldr	r3, [pc, #196]	@ (8004c04 <xTaskPriorityInherit+0xf4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b42:	f1c3 0207 	rsb	r2, r3, #7
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	6959      	ldr	r1, [r3, #20]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4a2b      	ldr	r2, [pc, #172]	@ (8004c08 <xTaskPriorityInherit+0xf8>)
 8004b5c:	4413      	add	r3, r2
 8004b5e:	4299      	cmp	r1, r3
 8004b60:	d13a      	bne.n	8004bd8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	3304      	adds	r3, #4
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe ff78 	bl	8003a5c <uxListRemove>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d115      	bne.n	8004b9e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b76:	4924      	ldr	r1, [pc, #144]	@ (8004c08 <xTaskPriorityInherit+0xf8>)
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <xTaskPriorityInherit+0x8e>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	43da      	mvns	r2, r3
 8004b94:	4b1d      	ldr	r3, [pc, #116]	@ (8004c0c <xTaskPriorityInherit+0xfc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8004c0c <xTaskPriorityInherit+0xfc>)
 8004b9c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b9e:	4b19      	ldr	r3, [pc, #100]	@ (8004c04 <xTaskPriorityInherit+0xf4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	2201      	movs	r2, #1
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	4b16      	ldr	r3, [pc, #88]	@ (8004c0c <xTaskPriorityInherit+0xfc>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	4a15      	ldr	r2, [pc, #84]	@ (8004c0c <xTaskPriorityInherit+0xfc>)
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4a10      	ldr	r2, [pc, #64]	@ (8004c08 <xTaskPriorityInherit+0xf8>)
 8004bc8:	441a      	add	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	f7fe fee6 	bl	80039a2 <vListInsertEnd>
 8004bd6:	e004      	b.n	8004be2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <xTaskPriorityInherit+0xf4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004be2:	2301      	movs	r3, #1
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	e008      	b.n	8004bfa <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bec:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <xTaskPriorityInherit+0xf4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d201      	bcs.n	8004bfa <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
	}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	200000c8 	.word	0x200000c8
 8004c08:	200000cc 	.word	0x200000cc
 8004c0c:	200001d0 	.word	0x200001d0

08004c10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8089 	beq.w	8004d3c <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10d      	bne.n	8004c4e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c36:	b672      	cpsid	i
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	b662      	cpsie	i
 8004c46:	60fb      	str	r3, [r7, #12]
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	e7fd      	b.n	8004c4a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d902      	bls.n	8004c5e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	e002      	b.n	8004c64 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	69fa      	ldr	r2, [r7, #28]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d066      	beq.n	8004d3c <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d161      	bne.n	8004d3c <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004c78:	4b32      	ldr	r3, [pc, #200]	@ (8004d44 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d10d      	bne.n	8004c9e <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c86:	b672      	cpsid	i
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	b662      	cpsie	i
 8004c96:	60bb      	str	r3, [r7, #8]
}
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop
 8004c9c:	e7fd      	b.n	8004c9a <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	db04      	blt.n	8004cbc <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f1c3 0207 	rsb	r2, r3, #7
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	6959      	ldr	r1, [r3, #20]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4a1f      	ldr	r2, [pc, #124]	@ (8004d48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004ccc:	4413      	add	r3, r2
 8004cce:	4299      	cmp	r1, r3
 8004cd0:	d134      	bne.n	8004d3c <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fec0 	bl	8003a5c <uxListRemove>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d115      	bne.n	8004d0e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce6:	4918      	ldr	r1, [pc, #96]	@ (8004d48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43da      	mvns	r2, r3
 8004d04:	4b11      	ldr	r3, [pc, #68]	@ (8004d4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	4a10      	ldr	r2, [pc, #64]	@ (8004d4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004d0c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d12:	2201      	movs	r2, #1
 8004d14:	409a      	lsls	r2, r3
 8004d16:	4b0d      	ldr	r3, [pc, #52]	@ (8004d4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4a06      	ldr	r2, [pc, #24]	@ (8004d48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004d2e:	441a      	add	r2, r3
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	3304      	adds	r3, #4
 8004d34:	4619      	mov	r1, r3
 8004d36:	4610      	mov	r0, r2
 8004d38:	f7fe fe33 	bl	80039a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d3c:	bf00      	nop
 8004d3e:	3720      	adds	r7, #32
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	200000c8 	.word	0x200000c8
 8004d48:	200000cc 	.word	0x200000cc
 8004d4c:	200001d0 	.word	0x200001d0

08004d50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004d54:	4b07      	ldr	r3, [pc, #28]	@ (8004d74 <pvTaskIncrementMutexHeldCount+0x24>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004d5c:	4b05      	ldr	r3, [pc, #20]	@ (8004d74 <pvTaskIncrementMutexHeldCount+0x24>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d62:	3201      	adds	r2, #1
 8004d64:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004d66:	4b03      	ldr	r3, [pc, #12]	@ (8004d74 <pvTaskIncrementMutexHeldCount+0x24>)
 8004d68:	681b      	ldr	r3, [r3, #0]
	}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	200000c8 	.word	0x200000c8

08004d78 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d82:	4b29      	ldr	r3, [pc, #164]	@ (8004e28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d88:	4b28      	ldr	r3, [pc, #160]	@ (8004e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fe fe64 	bl	8003a5c <uxListRemove>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d9a:	4b24      	ldr	r3, [pc, #144]	@ (8004e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da0:	2201      	movs	r2, #1
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	43da      	mvns	r2, r3
 8004da8:	4b21      	ldr	r3, [pc, #132]	@ (8004e30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4013      	ands	r3, r2
 8004dae:	4a20      	ldr	r2, [pc, #128]	@ (8004e30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004db0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db8:	d10a      	bne.n	8004dd0 <prvAddCurrentTaskToDelayedList+0x58>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	481a      	ldr	r0, [pc, #104]	@ (8004e34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004dca:	f7fe fdea 	bl	80039a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004dce:	e026      	b.n	8004e1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004dd8:	4b14      	ldr	r3, [pc, #80]	@ (8004e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d209      	bcs.n	8004dfc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004de8:	4b13      	ldr	r3, [pc, #76]	@ (8004e38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	4b0f      	ldr	r3, [pc, #60]	@ (8004e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3304      	adds	r3, #4
 8004df2:	4619      	mov	r1, r3
 8004df4:	4610      	mov	r0, r2
 8004df6:	f7fe fdf8 	bl	80039ea <vListInsert>
}
 8004dfa:	e010      	b.n	8004e1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8004e3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4b0a      	ldr	r3, [pc, #40]	@ (8004e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3304      	adds	r3, #4
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f7fe fdee 	bl	80039ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d202      	bcs.n	8004e1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e18:	4a09      	ldr	r2, [pc, #36]	@ (8004e40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	6013      	str	r3, [r2, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	200001cc 	.word	0x200001cc
 8004e2c:	200000c8 	.word	0x200000c8
 8004e30:	200001d0 	.word	0x200001d0
 8004e34:	200001b4 	.word	0x200001b4
 8004e38:	20000184 	.word	0x20000184
 8004e3c:	20000180 	.word	0x20000180
 8004e40:	200001e8 	.word	0x200001e8

08004e44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3b04      	subs	r3, #4
 8004e54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3b04      	subs	r3, #4
 8004e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f023 0201 	bic.w	r2, r3, #1
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3b04      	subs	r3, #4
 8004e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e74:	4a0c      	ldr	r2, [pc, #48]	@ (8004ea8 <pxPortInitialiseStack+0x64>)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3b14      	subs	r3, #20
 8004e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3b04      	subs	r3, #4
 8004e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f06f 0202 	mvn.w	r2, #2
 8004e92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3b20      	subs	r3, #32
 8004e98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	08004ead 	.word	0x08004ead

08004eac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004eb6:	4b15      	ldr	r3, [pc, #84]	@ (8004f0c <prvTaskExitError+0x60>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebe:	d00d      	beq.n	8004edc <prvTaskExitError+0x30>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec4:	b672      	cpsid	i
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	b662      	cpsie	i
 8004ed4:	60fb      	str	r3, [r7, #12]
}
 8004ed6:	bf00      	nop
 8004ed8:	bf00      	nop
 8004eda:	e7fd      	b.n	8004ed8 <prvTaskExitError+0x2c>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	b672      	cpsid	i
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	b662      	cpsie	i
 8004ef0:	60bb      	str	r3, [r7, #8]
}
 8004ef2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ef4:	bf00      	nop
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0fc      	beq.n	8004ef6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	2000000c 	.word	0x2000000c

08004f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f10:	4b07      	ldr	r3, [pc, #28]	@ (8004f30 <pxCurrentTCBConst2>)
 8004f12:	6819      	ldr	r1, [r3, #0]
 8004f14:	6808      	ldr	r0, [r1, #0]
 8004f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1a:	f380 8809 	msr	PSP, r0
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f380 8811 	msr	BASEPRI, r0
 8004f2a:	4770      	bx	lr
 8004f2c:	f3af 8000 	nop.w

08004f30 <pxCurrentTCBConst2>:
 8004f30:	200000c8 	.word	0x200000c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop

08004f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f38:	4808      	ldr	r0, [pc, #32]	@ (8004f5c <prvPortStartFirstTask+0x24>)
 8004f3a:	6800      	ldr	r0, [r0, #0]
 8004f3c:	6800      	ldr	r0, [r0, #0]
 8004f3e:	f380 8808 	msr	MSP, r0
 8004f42:	f04f 0000 	mov.w	r0, #0
 8004f46:	f380 8814 	msr	CONTROL, r0
 8004f4a:	b662      	cpsie	i
 8004f4c:	b661      	cpsie	f
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	df00      	svc	0
 8004f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f5a:	bf00      	nop
 8004f5c:	e000ed08 	.word	0xe000ed08

08004f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f66:	4b37      	ldr	r3, [pc, #220]	@ (8005044 <xPortStartScheduler+0xe4>)
 8004f68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	22ff      	movs	r2, #255	@ 0xff
 8004f76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8005048 <xPortStartScheduler+0xe8>)
 8004f8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800504c <xPortStartScheduler+0xec>)
 8004f90:	2207      	movs	r2, #7
 8004f92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f94:	e009      	b.n	8004faa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004f96:	4b2d      	ldr	r3, [pc, #180]	@ (800504c <xPortStartScheduler+0xec>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800504c <xPortStartScheduler+0xec>)
 8004f9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb2:	2b80      	cmp	r3, #128	@ 0x80
 8004fb4:	d0ef      	beq.n	8004f96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fb6:	4b25      	ldr	r3, [pc, #148]	@ (800504c <xPortStartScheduler+0xec>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f1c3 0307 	rsb	r3, r3, #7
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d00d      	beq.n	8004fde <xPortStartScheduler+0x7e>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc6:	b672      	cpsid	i
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	b662      	cpsie	i
 8004fd6:	60bb      	str	r3, [r7, #8]
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	e7fd      	b.n	8004fda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fde:	4b1b      	ldr	r3, [pc, #108]	@ (800504c <xPortStartScheduler+0xec>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	4a19      	ldr	r2, [pc, #100]	@ (800504c <xPortStartScheduler+0xec>)
 8004fe6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fe8:	4b18      	ldr	r3, [pc, #96]	@ (800504c <xPortStartScheduler+0xec>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ff0:	4a16      	ldr	r2, [pc, #88]	@ (800504c <xPortStartScheduler+0xec>)
 8004ff2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ffc:	4b14      	ldr	r3, [pc, #80]	@ (8005050 <xPortStartScheduler+0xf0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a13      	ldr	r2, [pc, #76]	@ (8005050 <xPortStartScheduler+0xf0>)
 8005002:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005006:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005008:	4b11      	ldr	r3, [pc, #68]	@ (8005050 <xPortStartScheduler+0xf0>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a10      	ldr	r2, [pc, #64]	@ (8005050 <xPortStartScheduler+0xf0>)
 800500e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005012:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005014:	f000 f8dc 	bl	80051d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005018:	4b0e      	ldr	r3, [pc, #56]	@ (8005054 <xPortStartScheduler+0xf4>)
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800501e:	f000 f8fb 	bl	8005218 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005022:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <xPortStartScheduler+0xf8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a0c      	ldr	r2, [pc, #48]	@ (8005058 <xPortStartScheduler+0xf8>)
 8005028:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800502c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800502e:	f7ff ff83 	bl	8004f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005032:	f7ff fb23 	bl	800467c <vTaskSwitchContext>
	prvTaskExitError();
 8005036:	f7ff ff39 	bl	8004eac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	e000e400 	.word	0xe000e400
 8005048:	200001f4 	.word	0x200001f4
 800504c:	200001f8 	.word	0x200001f8
 8005050:	e000ed20 	.word	0xe000ed20
 8005054:	2000000c 	.word	0x2000000c
 8005058:	e000ef34 	.word	0xe000ef34

0800505c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005066:	b672      	cpsid	i
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	b662      	cpsie	i
 8005076:	607b      	str	r3, [r7, #4]
}
 8005078:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800507a:	4b11      	ldr	r3, [pc, #68]	@ (80050c0 <vPortEnterCritical+0x64>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3301      	adds	r3, #1
 8005080:	4a0f      	ldr	r2, [pc, #60]	@ (80050c0 <vPortEnterCritical+0x64>)
 8005082:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005084:	4b0e      	ldr	r3, [pc, #56]	@ (80050c0 <vPortEnterCritical+0x64>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d112      	bne.n	80050b2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800508c:	4b0d      	ldr	r3, [pc, #52]	@ (80050c4 <vPortEnterCritical+0x68>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00d      	beq.n	80050b2 <vPortEnterCritical+0x56>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509a:	b672      	cpsid	i
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	b662      	cpsie	i
 80050aa:	603b      	str	r3, [r7, #0]
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	e7fd      	b.n	80050ae <vPortEnterCritical+0x52>
	}
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	2000000c 	.word	0x2000000c
 80050c4:	e000ed04 	.word	0xe000ed04

080050c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050ce:	4b13      	ldr	r3, [pc, #76]	@ (800511c <vPortExitCritical+0x54>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10d      	bne.n	80050f2 <vPortExitCritical+0x2a>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050da:	b672      	cpsid	i
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	b662      	cpsie	i
 80050ea:	607b      	str	r3, [r7, #4]
}
 80050ec:	bf00      	nop
 80050ee:	bf00      	nop
 80050f0:	e7fd      	b.n	80050ee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80050f2:	4b0a      	ldr	r3, [pc, #40]	@ (800511c <vPortExitCritical+0x54>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	4a08      	ldr	r2, [pc, #32]	@ (800511c <vPortExitCritical+0x54>)
 80050fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050fc:	4b07      	ldr	r3, [pc, #28]	@ (800511c <vPortExitCritical+0x54>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d105      	bne.n	8005110 <vPortExitCritical+0x48>
 8005104:	2300      	movs	r3, #0
 8005106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	f383 8811 	msr	BASEPRI, r3
}
 800510e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	2000000c 	.word	0x2000000c

08005120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005120:	f3ef 8009 	mrs	r0, PSP
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	4b15      	ldr	r3, [pc, #84]	@ (8005180 <pxCurrentTCBConst>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	f01e 0f10 	tst.w	lr, #16
 8005130:	bf08      	it	eq
 8005132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513a:	6010      	str	r0, [r2, #0]
 800513c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005140:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005144:	b672      	cpsid	i
 8005146:	f380 8811 	msr	BASEPRI, r0
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	b662      	cpsie	i
 8005154:	f7ff fa92 	bl	800467c <vTaskSwitchContext>
 8005158:	f04f 0000 	mov.w	r0, #0
 800515c:	f380 8811 	msr	BASEPRI, r0
 8005160:	bc09      	pop	{r0, r3}
 8005162:	6819      	ldr	r1, [r3, #0]
 8005164:	6808      	ldr	r0, [r1, #0]
 8005166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516a:	f01e 0f10 	tst.w	lr, #16
 800516e:	bf08      	it	eq
 8005170:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005174:	f380 8809 	msr	PSP, r0
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop

08005180 <pxCurrentTCBConst>:
 8005180:	200000c8 	.word	0x200000c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop

08005188 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005192:	b672      	cpsid	i
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	b662      	cpsie	i
 80051a2:	607b      	str	r3, [r7, #4]
}
 80051a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051a6:	f7ff f9ad 	bl	8004504 <xTaskIncrementTick>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051b0:	4b06      	ldr	r3, [pc, #24]	@ (80051cc <xPortSysTickHandler+0x44>)
 80051b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	2300      	movs	r3, #0
 80051ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	f383 8811 	msr	BASEPRI, r3
}
 80051c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	e000ed04 	.word	0xe000ed04

080051d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005204 <vPortSetupTimerInterrupt+0x34>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051da:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <vPortSetupTimerInterrupt+0x38>)
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051e0:	4b0a      	ldr	r3, [pc, #40]	@ (800520c <vPortSetupTimerInterrupt+0x3c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005210 <vPortSetupTimerInterrupt+0x40>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	099b      	lsrs	r3, r3, #6
 80051ec:	4a09      	ldr	r2, [pc, #36]	@ (8005214 <vPortSetupTimerInterrupt+0x44>)
 80051ee:	3b01      	subs	r3, #1
 80051f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051f2:	4b04      	ldr	r3, [pc, #16]	@ (8005204 <vPortSetupTimerInterrupt+0x34>)
 80051f4:	2207      	movs	r2, #7
 80051f6:	601a      	str	r2, [r3, #0]
}
 80051f8:	bf00      	nop
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	e000e010 	.word	0xe000e010
 8005208:	e000e018 	.word	0xe000e018
 800520c:	20000000 	.word	0x20000000
 8005210:	10624dd3 	.word	0x10624dd3
 8005214:	e000e014 	.word	0xe000e014

08005218 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005218:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005228 <vPortEnableVFP+0x10>
 800521c:	6801      	ldr	r1, [r0, #0]
 800521e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005222:	6001      	str	r1, [r0, #0]
 8005224:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005226:	bf00      	nop
 8005228:	e000ed88 	.word	0xe000ed88

0800522c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005232:	f3ef 8305 	mrs	r3, IPSR
 8005236:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b0f      	cmp	r3, #15
 800523c:	d917      	bls.n	800526e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800523e:	4a1a      	ldr	r2, [pc, #104]	@ (80052a8 <vPortValidateInterruptPriority+0x7c>)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005248:	4b18      	ldr	r3, [pc, #96]	@ (80052ac <vPortValidateInterruptPriority+0x80>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	7afa      	ldrb	r2, [r7, #11]
 800524e:	429a      	cmp	r2, r3
 8005250:	d20d      	bcs.n	800526e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005256:	b672      	cpsid	i
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	b662      	cpsie	i
 8005266:	607b      	str	r3, [r7, #4]
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	e7fd      	b.n	800526a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800526e:	4b10      	ldr	r3, [pc, #64]	@ (80052b0 <vPortValidateInterruptPriority+0x84>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005276:	4b0f      	ldr	r3, [pc, #60]	@ (80052b4 <vPortValidateInterruptPriority+0x88>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d90d      	bls.n	800529a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	b672      	cpsid	i
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	b662      	cpsie	i
 8005292:	603b      	str	r3, [r7, #0]
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop
 8005298:	e7fd      	b.n	8005296 <vPortValidateInterruptPriority+0x6a>
	}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	e000e3f0 	.word	0xe000e3f0
 80052ac:	200001f4 	.word	0x200001f4
 80052b0:	e000ed0c 	.word	0xe000ed0c
 80052b4:	200001f8 	.word	0x200001f8

080052b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08a      	sub	sp, #40	@ 0x28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052c4:	f7ff f870 	bl	80043a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052c8:	4b5d      	ldr	r3, [pc, #372]	@ (8005440 <pvPortMalloc+0x188>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052d0:	f000 f920 	bl	8005514 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052d4:	4b5b      	ldr	r3, [pc, #364]	@ (8005444 <pvPortMalloc+0x18c>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4013      	ands	r3, r2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f040 8094 	bne.w	800540a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d020      	beq.n	800532a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80052e8:	2208      	movs	r2, #8
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4413      	add	r3, r2
 80052ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d017      	beq.n	800532a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f023 0307 	bic.w	r3, r3, #7
 8005300:	3308      	adds	r3, #8
 8005302:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00d      	beq.n	800532a <pvPortMalloc+0x72>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005312:	b672      	cpsid	i
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	b662      	cpsie	i
 8005322:	617b      	str	r3, [r7, #20]
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop
 8005328:	e7fd      	b.n	8005326 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d06c      	beq.n	800540a <pvPortMalloc+0x152>
 8005330:	4b45      	ldr	r3, [pc, #276]	@ (8005448 <pvPortMalloc+0x190>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	429a      	cmp	r2, r3
 8005338:	d867      	bhi.n	800540a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800533a:	4b44      	ldr	r3, [pc, #272]	@ (800544c <pvPortMalloc+0x194>)
 800533c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800533e:	4b43      	ldr	r3, [pc, #268]	@ (800544c <pvPortMalloc+0x194>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005344:	e004      	b.n	8005350 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	429a      	cmp	r2, r3
 8005358:	d903      	bls.n	8005362 <pvPortMalloc+0xaa>
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f1      	bne.n	8005346 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005362:	4b37      	ldr	r3, [pc, #220]	@ (8005440 <pvPortMalloc+0x188>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005368:	429a      	cmp	r2, r3
 800536a:	d04e      	beq.n	800540a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2208      	movs	r2, #8
 8005372:	4413      	add	r3, r2
 8005374:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	1ad2      	subs	r2, r2, r3
 8005386:	2308      	movs	r3, #8
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	429a      	cmp	r2, r3
 800538c:	d922      	bls.n	80053d4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800538e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4413      	add	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00d      	beq.n	80053bc <pvPortMalloc+0x104>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a4:	b672      	cpsid	i
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	b662      	cpsie	i
 80053b4:	613b      	str	r3, [r7, #16]
}
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	e7fd      	b.n	80053b8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	1ad2      	subs	r2, r2, r3
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053ce:	69b8      	ldr	r0, [r7, #24]
 80053d0:	f000 f902 	bl	80055d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005448 <pvPortMalloc+0x190>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	4a1a      	ldr	r2, [pc, #104]	@ (8005448 <pvPortMalloc+0x190>)
 80053e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053e2:	4b19      	ldr	r3, [pc, #100]	@ (8005448 <pvPortMalloc+0x190>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005450 <pvPortMalloc+0x198>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d203      	bcs.n	80053f6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053ee:	4b16      	ldr	r3, [pc, #88]	@ (8005448 <pvPortMalloc+0x190>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a17      	ldr	r2, [pc, #92]	@ (8005450 <pvPortMalloc+0x198>)
 80053f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	4b12      	ldr	r3, [pc, #72]	@ (8005444 <pvPortMalloc+0x18c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	431a      	orrs	r2, r3
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800540a:	f7fe ffdb 	bl	80043c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00d      	beq.n	8005434 <pvPortMalloc+0x17c>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	b672      	cpsid	i
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	b662      	cpsie	i
 800542c:	60fb      	str	r3, [r7, #12]
}
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <pvPortMalloc+0x178>
	return pvReturn;
 8005434:	69fb      	ldr	r3, [r7, #28]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3728      	adds	r7, #40	@ 0x28
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20003e04 	.word	0x20003e04
 8005444:	20003e10 	.word	0x20003e10
 8005448:	20003e08 	.word	0x20003e08
 800544c:	20003dfc 	.word	0x20003dfc
 8005450:	20003e0c 	.word	0x20003e0c

08005454 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d04e      	beq.n	8005504 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005466:	2308      	movs	r3, #8
 8005468:	425b      	negs	r3, r3
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4413      	add	r3, r2
 800546e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	4b24      	ldr	r3, [pc, #144]	@ (800550c <vPortFree+0xb8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4013      	ands	r3, r2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10d      	bne.n	800549e <vPortFree+0x4a>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005486:	b672      	cpsid	i
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	b662      	cpsie	i
 8005496:	60fb      	str	r3, [r7, #12]
}
 8005498:	bf00      	nop
 800549a:	bf00      	nop
 800549c:	e7fd      	b.n	800549a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00d      	beq.n	80054c2 <vPortFree+0x6e>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054aa:	b672      	cpsid	i
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	b662      	cpsie	i
 80054ba:	60bb      	str	r3, [r7, #8]
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	e7fd      	b.n	80054be <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	4b11      	ldr	r3, [pc, #68]	@ (800550c <vPortFree+0xb8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d019      	beq.n	8005504 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d115      	bne.n	8005504 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	4b0b      	ldr	r3, [pc, #44]	@ (800550c <vPortFree+0xb8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	43db      	mvns	r3, r3
 80054e2:	401a      	ands	r2, r3
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054e8:	f7fe ff5e 	bl	80043a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	4b07      	ldr	r3, [pc, #28]	@ (8005510 <vPortFree+0xbc>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4413      	add	r3, r2
 80054f6:	4a06      	ldr	r2, [pc, #24]	@ (8005510 <vPortFree+0xbc>)
 80054f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054fa:	6938      	ldr	r0, [r7, #16]
 80054fc:	f000 f86c 	bl	80055d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005500:	f7fe ff60 	bl	80043c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005504:	bf00      	nop
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20003e10 	.word	0x20003e10
 8005510:	20003e08 	.word	0x20003e08

08005514 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800551a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800551e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005520:	4b27      	ldr	r3, [pc, #156]	@ (80055c0 <prvHeapInit+0xac>)
 8005522:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00c      	beq.n	8005548 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3307      	adds	r3, #7
 8005532:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0307 	bic.w	r3, r3, #7
 800553a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	4a1f      	ldr	r2, [pc, #124]	@ (80055c0 <prvHeapInit+0xac>)
 8005544:	4413      	add	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800554c:	4a1d      	ldr	r2, [pc, #116]	@ (80055c4 <prvHeapInit+0xb0>)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005552:	4b1c      	ldr	r3, [pc, #112]	@ (80055c4 <prvHeapInit+0xb0>)
 8005554:	2200      	movs	r2, #0
 8005556:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	4413      	add	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005560:	2208      	movs	r2, #8
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0307 	bic.w	r3, r3, #7
 800556e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4a15      	ldr	r2, [pc, #84]	@ (80055c8 <prvHeapInit+0xb4>)
 8005574:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005576:	4b14      	ldr	r3, [pc, #80]	@ (80055c8 <prvHeapInit+0xb4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2200      	movs	r2, #0
 800557c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800557e:	4b12      	ldr	r3, [pc, #72]	@ (80055c8 <prvHeapInit+0xb4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	1ad2      	subs	r2, r2, r3
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005594:	4b0c      	ldr	r3, [pc, #48]	@ (80055c8 <prvHeapInit+0xb4>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	4a0a      	ldr	r2, [pc, #40]	@ (80055cc <prvHeapInit+0xb8>)
 80055a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4a09      	ldr	r2, [pc, #36]	@ (80055d0 <prvHeapInit+0xbc>)
 80055aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055ac:	4b09      	ldr	r3, [pc, #36]	@ (80055d4 <prvHeapInit+0xc0>)
 80055ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80055b2:	601a      	str	r2, [r3, #0]
}
 80055b4:	bf00      	nop
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	200001fc 	.word	0x200001fc
 80055c4:	20003dfc 	.word	0x20003dfc
 80055c8:	20003e04 	.word	0x20003e04
 80055cc:	20003e0c 	.word	0x20003e0c
 80055d0:	20003e08 	.word	0x20003e08
 80055d4:	20003e10 	.word	0x20003e10

080055d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055e0:	4b28      	ldr	r3, [pc, #160]	@ (8005684 <prvInsertBlockIntoFreeList+0xac>)
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	e002      	b.n	80055ec <prvInsertBlockIntoFreeList+0x14>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d8f7      	bhi.n	80055e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	4413      	add	r3, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d108      	bne.n	800561a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	441a      	add	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	441a      	add	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d118      	bne.n	8005660 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4b15      	ldr	r3, [pc, #84]	@ (8005688 <prvInsertBlockIntoFreeList+0xb0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d00d      	beq.n	8005656 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	441a      	add	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	e008      	b.n	8005668 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005656:	4b0c      	ldr	r3, [pc, #48]	@ (8005688 <prvInsertBlockIntoFreeList+0xb0>)
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e003      	b.n	8005668 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	429a      	cmp	r2, r3
 800566e:	d002      	beq.n	8005676 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20003dfc 	.word	0x20003dfc
 8005688:	20003e04 	.word	0x20003e04

0800568c <memset>:
 800568c:	4402      	add	r2, r0
 800568e:	4603      	mov	r3, r0
 8005690:	4293      	cmp	r3, r2
 8005692:	d100      	bne.n	8005696 <memset+0xa>
 8005694:	4770      	bx	lr
 8005696:	f803 1b01 	strb.w	r1, [r3], #1
 800569a:	e7f9      	b.n	8005690 <memset+0x4>

0800569c <strstr>:
 800569c:	780a      	ldrb	r2, [r1, #0]
 800569e:	b570      	push	{r4, r5, r6, lr}
 80056a0:	b96a      	cbnz	r2, 80056be <strstr+0x22>
 80056a2:	bd70      	pop	{r4, r5, r6, pc}
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d109      	bne.n	80056bc <strstr+0x20>
 80056a8:	460c      	mov	r4, r1
 80056aa:	4605      	mov	r5, r0
 80056ac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f6      	beq.n	80056a2 <strstr+0x6>
 80056b4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80056b8:	429e      	cmp	r6, r3
 80056ba:	d0f7      	beq.n	80056ac <strstr+0x10>
 80056bc:	3001      	adds	r0, #1
 80056be:	7803      	ldrb	r3, [r0, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1ef      	bne.n	80056a4 <strstr+0x8>
 80056c4:	4618      	mov	r0, r3
 80056c6:	e7ec      	b.n	80056a2 <strstr+0x6>

080056c8 <__libc_init_array>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005700 <__libc_init_array+0x38>)
 80056cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005704 <__libc_init_array+0x3c>)
 80056ce:	1b64      	subs	r4, r4, r5
 80056d0:	10a4      	asrs	r4, r4, #2
 80056d2:	2600      	movs	r6, #0
 80056d4:	42a6      	cmp	r6, r4
 80056d6:	d109      	bne.n	80056ec <__libc_init_array+0x24>
 80056d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005708 <__libc_init_array+0x40>)
 80056da:	4c0c      	ldr	r4, [pc, #48]	@ (800570c <__libc_init_array+0x44>)
 80056dc:	f000 f818 	bl	8005710 <_init>
 80056e0:	1b64      	subs	r4, r4, r5
 80056e2:	10a4      	asrs	r4, r4, #2
 80056e4:	2600      	movs	r6, #0
 80056e6:	42a6      	cmp	r6, r4
 80056e8:	d105      	bne.n	80056f6 <__libc_init_array+0x2e>
 80056ea:	bd70      	pop	{r4, r5, r6, pc}
 80056ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f0:	4798      	blx	r3
 80056f2:	3601      	adds	r6, #1
 80056f4:	e7ee      	b.n	80056d4 <__libc_init_array+0xc>
 80056f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fa:	4798      	blx	r3
 80056fc:	3601      	adds	r6, #1
 80056fe:	e7f2      	b.n	80056e6 <__libc_init_array+0x1e>
 8005700:	08005758 	.word	0x08005758
 8005704:	08005758 	.word	0x08005758
 8005708:	08005758 	.word	0x08005758
 800570c:	0800575c 	.word	0x0800575c

08005710 <_init>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	bf00      	nop
 8005714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005716:	bc08      	pop	{r3}
 8005718:	469e      	mov	lr, r3
 800571a:	4770      	bx	lr

0800571c <_fini>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	bf00      	nop
 8005720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005722:	bc08      	pop	{r3}
 8005724:	469e      	mov	lr, r3
 8005726:	4770      	bx	lr
